

// ----------------------------------------------------------------------------------------------------------------------------------------------
package DeathSpawn
// ----------------------------------------------------------------------------------------------------------------------------------------------

/*  DESCRIPTION
    A small library to add so called "death spawn" units (units that
    spawn when a unit dies) to a particular units (like hydras).null

    HOW TO USE
    Just use the function

        unit.addDeathSpawn()
    
    To add deathspawn to a unit. You have a few methods on the 
    returned DeathSpawnData object to alter how they spawn (effect
     and code on spawn)

*/

// ----------------------------------------------------------------------------------------------------------------------------------------------

import HashMap
import RandomAngle
import TimedSpecialEffects

// ----------------------------------------------------------------------------------------------------------------------------------------------


public function unit.addDeathSpawn(int deathSpawnId, int numberOfUnits) returns DeathSpawnData
    return new DeathSpawnData(this, deathSpawnId, numberOfUnits)

// ----------------------------------------------------------------------------------------------------------------------------------------------


HashMap<unit, DeathSpawnData> instances = new HashMap<unit,DeathSpawnData>


interface RemoteFunc
    function run(unit u)


public class DeathSpawnData

    private static trigger trg_UnitDies

    private int numberOfUnits
    private int deathSpawnId

    private unit source
    private string effectOnSpawn

    private RemoteFunc codeOnUnitSpawn


    construct(unit source, int deathSpawnId, int numberOfUnits)
        this.source = source
        this.deathSpawnId = deathSpawnId
        this.numberOfUnits = numberOfUnits

        if trg_UnitDies == null
            trg_UnitDies = CreateTrigger()
            ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)
            ..addAction(function unitDies)

        instances.put(source, this)


    ondestroy
        instances.remove(source)
        if codeOnUnitSpawn != null
            destroy codeOnUnitSpawn


    /** Set a lambdaexpression to run for each unit spawnning */
    function setCodeOnUnitSpawn(RemoteFunc codeOnUnitSpawn)
        this.codeOnUnitSpawn = codeOnUnitSpawn

    /** Sets the sfx on the unit spawning - it's set to the position of the unit*/
    function setEffectOnSpawn(string effectOnSpawn)
        this.effectOnSpawn = effectOnSpawn


    private function spawn()

        let sourcePos = source.getPos()
        unit spawnedUnit

        for i = 1 to numberOfUnits
            spawnedUnit = createUnit(source.getOwner(),deathSpawnId, sourcePos, randomAngle())
            if codeOnUnitSpawn != null
                codeOnUnitSpawn.run(spawnedUnit)

            if effectOnSpawn != null
                addEffect(effectOnSpawn, spawnedUnit.getPos())
                ..setDuration(5)


        destroy this
        
        
    private static function unitDies()
        unit dyingUnit = GetDyingUnit()
    
        if not instances == null and instances.has(dyingUnit)
            instances.get(dyingUnit).spawn()
        

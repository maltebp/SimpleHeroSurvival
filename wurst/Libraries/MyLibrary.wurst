package MyLibrary

/** Gets the unit nearest the spawnedUnit from the spawner's targetRect.*/
public function unit.getNearestEnemyTargetInRect(rect whichRect) returns unit 
    group targets = ENUM_GROUP
    targets.enumUnitsInRect(whichRect)
    player owner = this.getOwner()

    // Removing the units not to be hit
    for u in targets
        if( not u.isAlive() or u.getOwner().isAllyOf(owner) )
            targets.removeUnit(u)

    // Finding nearest target
    real shortestDist = 999999
    unit target = null
    vec2 originPos = this.getPos()
    for u from targets
        real distance = u.getPos().distanceTo(originPos)
        if distance < shortestDist
            shortestDist = distance
            target = u
        
    return target


/** Checks how many of a certain item type the unit has */
public function unit.getNumberOfItem(int itemId) returns int
    var number = 0
    let inventorySize = this.inventorySize()
    
    if inventorySize > 0

        for index = 0 to (inventorySize-1)
            if this.itemInSlot(index).getTypeId() == itemId
                number++       

    return number

public function isFriendly() returns boolean
    return false

public function unit.isValidEnemyTarget(player enemy) returns boolean
    return this.getOwner().isEnemyOf(enemy) and this.isAliveTrick()


public function unit.isFriendlyTarget(player ally) returns boolean
    return not this.getOwner().isEnemyOf(ally) and this.isAliveTrick()


public function group.enumEnemyTargets(player enemy, vec2 pos, real range)
    this.enumUnitsInRange(pos, range)

    if this.size() > 0
        for target in this
            if not target.isValidEnemyTarget(enemy)
                this.removeUnit(target)


public function group.enumFriendlyTargets(player ally, vec2 pos, real range)
    this.enumUnitsInRange(pos, range)

    if this.size() > 0
        for target in this
            if not target.isFriendlyTarget(ally)
                this.removeUnit(target)
    

public function unit.isEnemyOf(unit whichUnit) returns boolean
    return this.getOwner().isEnemyOf(whichUnit.getOwner())

public function unit.isAllyOf(unit whichUnit) returns boolean
    return this.getOwner().isAllyOf(whichUnit.getOwner())  



interface GroupCallback
    function callback(unit u)

public function forEnemiesInRange(player sourcePlayer, vec2 pos, real range, GroupCallback cb )
    let units = ENUM_GROUP..enumEnemyTargets( sourcePlayer, pos, range)

    for u from units
        cb.callback(u)

    destroy cb
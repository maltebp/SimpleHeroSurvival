package UnitSpawner

import TimerUtils
import public SoundUtils
import Orders

public class UnitSpawner
//=========================================================================================================================================================

    // Settings

    private static constant boolean ACTIVATEONCONSTRUCT = true

// =========================================================================================================================================================

    // Class Variables

    // Instance Variables
    private real spawnFrequency
    private int spawnCount
    private int currentSpawnCount = 0
    private real spawnFrequencyDeviation
    private real startDelay
    private int  unitId
    private player owner
    private vec2 spawnPos
    private real spawnFacing = -1
    private rect spawnRect
    private group spawnedUnits
    private boolean randomSpawnPoint // Toggles it to spawn somewhere random in spawnRect
    private timer timer_Spawn
    private boolean isActivated = ACTIVATEONCONSTRUCT
    private string spawnEffect
    private boolean isRunning = false
    private unit targetOnSpawn
    private rect targetRect // The rect in which it has to search for a random target
    private SoundDefinition soundOnspawn

    
// -------------------------------------------------------------------------------------------------------------------------------------
// Methods

    construct(int unitId, player owner, vec2 spawnPos, real spawnFrequency)
        this.unitId = unitId
        this.spawnFrequency = spawnFrequency
        this.startDelay =  spawnFrequency
        this.spawnPos = spawnPos

        if ACTIVATEONCONSTRUCT
            activate()


    ondestroy
        deactivate()

    function start()
        if not isActivated
            activate()

        isRunning = true
        timer_Spawn.start(getStartDelayWithDeviation(), function spawn) 
        
    /** Stops the unit spawner from spawning. Does not remove units or deactivate
        the spawner. Use deactivate() and clear() for that.*/
    function stop()
        isActivated = false
        timer_Spawn.pause()
    
    /** Stops the spawner, and removes all the units that it has made */
    function clear()
        for spawnedUnit from spawnedUnits
            spawnedUnit.remove()
        stop()
            
    /** Sets up the spawner (creating timers and triggers) */
    function activate()
        isActivated = true
        timer_Spawn = getTimer()..setData(this castTo int)
        spawnedUnits = CreateGroup()
    
    /** Releases timers and destroys triggers */
    function deactivate()
        isActivated = false
        timer_Spawn.release()
        spawnedUnits.destr()

    /** Sets the amount of that it will make before automatically stopping.
        @param spawnCount The number of units to spawn. 0 means it will spawn
        until it's turned off again (default).*/
    function setSpawnCount(int spawnCount)
        this.spawnCount = spawnCount
        

    /** Sets the start delay of the timer. Default startDelay is spawnFrequency. */
    function setStartDelay(real startDelay)
        this.startDelay = startDelay

    /** Enable random spawn position, by setting a rect in which to find this
        random position.
        @param spawnRect: A rect in which the unit should spawn. If null, it
        will use it's specific position.*/
    function setRandomSpawn(rect spawnRect)
        this.spawnRect = spawnRect
    
    /** Adds a possible deviation (positive and negative) percentage to the frequency
        and startDelay of the unitspawner.
        The deviation is calculated before it spawns a new unit, so that the first unit
        make take x seconds to spawn, but the second might take x*0.95 to spawn.
        @param deviation: the deviation in decimal percent (0.05 = 5%)*/
    function setFrequencyDeviation(real deviation)
        this.spawnFrequencyDeviation = deviation

    
    /** Sets a rect in which to find a random target to attack when spawned. It 
        will "move-attack", so it will attack the first target it meets.
        It will prioritize a specific target set with setUnitTargetOnSpawn(),
        over this (if you by accident set them both).
        @param rectToTarget: The rect in which to search for a target */
    function setRandomTargetOnSpawn(rect rectToTarget )
        this.targetRect = rectToTarget
        

    /** Sets a unit target for the unit spawned to attack, once it spawns.
        If no target is assigned, it will just stand when spawned.
        It will prioritize this over setRandomTargetOnSpawn() if both are
        set by accident.
        @param target: the unit to target when spawned.*/
    function setUnitTargetOnSpawn(unit target)
        this.targetOnSpawn = target
        // FIX THIS: It's appropriate to have the same unit being the target
        // for allt he units spawned with this spawner.

    /** Sets a fixed facing for spawned units.-1 sets it to random, which is default
        @param spawnFacing: the angle in radians. -1 sets it facing to random*/
    function setUnitSpawnFacing( real spawnFacing )
        this.spawnFacing = spawnFacing

    /** Sets an effect to create everytime a unit spawns. The effect is immediately
        destroy, so use an effect which has a "death" animation for it to be shown.
        @param effectPath: the filepath of the effect model to create*/
    function setSpawnEffect(string effectPath)
        this.spawnEffect = effectPath

    /** Creates a sound to play when a unit spawns. It's 3D and is played on the
        spawnPos.
        @ param soundPath: the string path for the sound file. Use Sounds (it's public)*/
    function setSoundOnSpawn( string soundPath )
        this.soundOnspawn = new SoundDefinition(soundPath, false, true)
        

    /** Gets a random unit from the spawner's targetRect (this is set with then
        setRandomTargetOnSpawn() method).
        @return:    a random unit from the targetRect, that is alive and is an enemy
        of the owner of the spawner. It returns null if no unit is found.*/
    private function getRandomTargetInRect() returns unit
        
        group targets = ENUM_GROUP
        targets.enumUnitsInRect(targetRect)

        // Removing the units not to be hit
        for u in targets
            if( not u.isAlive() or u.getOwner().isAllyOf(owner) )
                targets.removeUnit(u)

        unit target = targets.getRandomUnit()
        targets.clear()
        return target


    /** Calculate a random frequency using the set frequency +/- the deviation.*/
    private function getFrequencyWithDeviation() returns real
        return GetRandomReal(spawnFrequency*(1-spawnFrequencyDeviation),spawnFrequency*(1+spawnFrequencyDeviation))

    /** Calculate a random startDelay using the set startDelay +/- the deviation.*/
    private function getStartDelayWithDeviation() returns real
        return GetRandomReal(startDelay*(1-spawnFrequencyDeviation),startDelay*(1+spawnFrequencyDeviation))

    /** Spawns the unit, and if it's set, make effect and order attack*/
    private static function spawn()
        thistype instance = GetExpiredTimer().getData() castTo thistype

        // Finding Spawn Pos
        vec2 spawnPos
        if instance.spawnRect != null
            spawnPos = instance.spawnRect.randomPoint()
        else
            spawnPos = instance.spawnPos

        // Spawning units
        angle spawnFacing = (instance.spawnFacing==-1) ? angle(GetRandomReal(0, 2*PI)) : angle(instance.spawnFacing)
        unit spawnedUnit = createUnit(instance.owner, instance.unitId, spawnPos, spawnFacing)
        instance.spawnedUnits.addUnit(spawnedUnit)

        // Find target to attack on spawn
        if instance.targetOnSpawn != null
            spawnedUnit.issueTargetOrder("attack", instance.targetOnSpawn)

        else if instance.targetRect != null
            unit randomTarget = instance.getRandomTargetInRect()
            if randomTarget != null
                spawnedUnit.issuePointOrderById(Orders.attackground, randomTarget.getPos())            

        // Creating effects
        if instance.soundOnspawn != null
            instance.soundOnspawn.playOnPoint(instance.spawnPos.toVec3())
            
        if instance.spawnEffect != null
            addEffect(instance.spawnEffect, instance.spawnPos )
            ..destr()

        /*  Rerun Timer
            It first checks if it's restricted by a number of spawns,
            or if it has spawned what it should.*/
        if instance.spawnCount != 0
            instance.currentSpawnCount++
            if instance.currentSpawnCount < instance.spawnCount
                instance.timer_Spawn.start(instance.getFrequencyWithDeviation(), function spawn)
            else
                instance.stop()
        else
            instance.timer_Spawn.start(instance.getFrequencyWithDeviation(), function spawn)
                
        
package Damage

import Stats
import DamageDetection

constant boolean TESTMODE = true




/** Deals damage to the target which is adjust like normal attacks (reduced by armor) */
public function unit.damageTargetPhysical(unit target, real damage)
    UnitDamageTarget(this, target, damage, false, false, ATTACK_TYPE_MELEE, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)

/** Deals damage to the target which is adjusted as spell damage (reduced by spell reduction and Elune's Grace)*/
public function unit.damageTargetSpell(unit target, real damage)
    this.damageTargetUniversal(target, (1-target.getStat(STAT_RESISTANCE)) * damage)

/** Deals damage to the target which is not adjusted by anything */
public function unit.damageTargetUniversal(unit target, real damage)
    UnitDamageTarget(this, target, damage, false, false, ATTACK_TYPE_MELEE, DAMAGE_TYPE_UNIVERSAL, WEAPON_TYPE_WHOKNOWS)


init
    addOnDamageFunc() ->
        let target = GetTriggerUnit()
        let dmg = GetEventDamage()

        // Adjust to damage taken
        let adjustedDamage = dmg * target.getStat(STAT_DAMAGE_TAKEN)
        BlzSetEventDamage(adjustedDamage)
        

        // print(target.getName() + " damaged with {0} damage".format(dmg.toString(1)))



    
// Bonus info on damage: Elune's Grace reduces Magic Damage (from regular attacks) AND Spell Damage taken







// ========================================================================================================================================================================================
// TEST AREA 
enum DmgType
    PHYSICAL
    SPELL
    UNIVERSAL
    

unit testUnit


function damage(DmgType damageType, real damage)
    let startHp = testUnit.getHP()
    let dummy = createUnit(Player(2), 'h002', testUnit.getPos(), angle(0))

    if damageType == DmgType.SPELL
        UnitDamageTarget(dummy, testUnit, damage, false, false, ATTACK_TYPE_NORMAL, DAMAGE_TYPE_MAGIC, WEAPON_TYPE_WHOKNOWS)
        
    
    else if damageType == DmgType.PHYSICAL
        UnitDamageTarget(dummy, testUnit, damage, false, false, ATTACK_TYPE_MELEE, DAMAGE_TYPE_NORMAL, WEAPON_TYPE_WHOKNOWS)


    else if damageType == DmgType.UNIVERSAL
        UnitDamageTarget(dummy, testUnit, damage, false, false, ATTACK_TYPE_MELEE, DAMAGE_TYPE_UNIVERSAL, WEAPON_TYPE_WHOKNOWS)

    print("Dealt "+(startHp-testUnit.getHP()).toString(1) + " damage.")

    

function damagePhysical()
    let input = GetEventPlayerChatString()

    if input.length() > 16
        
        let numberInput = input.ltrim("damage physical ").toReal()
    
        damage(DmgType.PHYSICAL, numberInput)

    else
        print("wrong input")

function damageSpell()
    let input = GetEventPlayerChatString()

    if input.length() > 12
        
        let numberInput = input.ltrim("damage spell ").toReal()
    
        damage(DmgType.SPELL, numberInput)

    else
        print("wrong input")    
    
        
function damageUniversal()
    let input = GetEventPlayerChatString()

    if input.length() > 17
    
        let numberInput = input.ltrim("damage universal ").toReal()
    
        damage(DmgType.UNIVERSAL, numberInput)

    else
        print("wrong input")    
    



function restore()
    testUnit.setHP(testUnit.getMaxHP())

public function setDamageTestUnit(unit whichUnit)
    testUnit = whichUnit



init
    if TESTMODE
        CreateTrigger()
        ..registerPlayerChatEvent(Player(0), "damage physical ", false)
        ..addAction(function damagePhysical)

        CreateTrigger()
        ..registerPlayerChatEvent(Player(0), "damage spell ", false)
        ..addAction(function damageSpell) 

        CreateTrigger()
        ..registerPlayerChatEvent(Player(0), "damage universal ", false)
        ..addAction(function damageUniversal) 

        CreateTrigger()
        ..registerPlayerChatEvent(Player(0), "restore", false)
        ..addAction(function restore) 
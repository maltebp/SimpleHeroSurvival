package TrainingPoints

import HashMap
import UnitStatsSystem

constant real ARMOR_PER_POINT = 1
constant int    HEALTH_PER_POINT = 15
constant int POWER_PER_POINT = 1
constant real ATTACKSPEED_PER_POINT = 0.01 

// Update these at some point
constant integer    TRAINID_HEALTH = 'I002'
constant integer    TRAINID_HEALTH5 = 'I00F'
constant integer    TRAINID_ARMOR = 'I003'
constant integer    TRAINID_ARMOR5 = 'I00K'
constant integer    TRAINID_POWER = 'I004'
constant integer    TRAINID_POWER5 = 'I00C'
constant integer    TRAINID_ATTACKSPEED = 'I001'
constant integer    TRAINID_ATTACKSPEED5 = 'I00G'
constant integer    TRAINID_RESET = 'I005'


class HeroTrainingPoints
    private static HashMap <unit, thistype> instances = new HashMap<unit, thistype>
    
    private player  owner
    private unit    hero
    private int     health
    private int     power
    private real    armor
    private real    attackSpeed
    private int    pointsTrained

    construct(unit whichUnit)
        this.hero = whichUnit
        this.owner = whichUnit.getOwner()
        instances.put(whichUnit, this)


    ondestroy
        instances.remove(hero)


    protected function resetPoints()
        owner.addLumber(pointsTrained)
        pointsTrained = 0

        adjustHealth(-health)
        adjustAttackSpeed(-attackSpeed)
        adjustArmor(-armor)
        adjustPower(-power)

        destroy this


    /** Can be negative */
    protected function adjustHealth(int adjustAmount)
        hero.setMaxHP(R2I(hero.getMaxHP())+adjustAmount, true)
        health += adjustAmount

    protected function adjustArmor(real adjustAmount)
        hero.setArmor(hero.getArmor()+adjustAmount)
        armor += adjustAmount
        

    protected function adjustPower(int adjustAmount)
        hero.adjustDamageFlat(adjustAmount.toReal())
        power += adjustAmount
        

    protected function adjustAttackSpeed(real adjustAmount)
        //Resetting attack speed
        hero.adjustAttackSpeed(adjustAmount)
        attackSpeed += adjustAmount
        
    /** Gets the instances containing information about training points for
        a speficic unit. If that doesn't exists, it will create one, and
        return that. */
    protected static function getUnitInstance(unit whichUnit) returns thistype
        
        if not instances.has(whichUnit)
            new HeroTrainingPoints(whichUnit)
         
        return instances.get(whichUnit)
    

    protected static function train()
        
        unit unitToTrain = GetBuyingUnit()
        thistype instance = getUnitInstance(unitToTrain)
        integer whatToTrain = GetSoldItem().getTypeId()


        switch whatToTrain
            
            case TRAINID_HEALTH
                instance.pointsTrained++
                instance.adjustHealth(HEALTH_PER_POINT)

            case TRAINID_HEALTH5
                instance.pointsTrained += 5
                instance.adjustHealth(HEALTH_PER_POINT*5)

            case TRAINID_ARMOR
                instance.pointsTrained++
                instance.adjustArmor(ARMOR_PER_POINT)

            case TRAINID_ARMOR5
                instance.pointsTrained += 5
                instance.adjustArmor(ARMOR_PER_POINT*5)

            case TRAINID_ATTACKSPEED
                instance.pointsTrained++
                instance.adjustAttackSpeed(ATTACKSPEED_PER_POINT)

            case TRAINID_ATTACKSPEED5
                instance.pointsTrained += 5
                instance.adjustAttackSpeed(ATTACKSPEED_PER_POINT*5)

            case TRAINID_POWER
                instance.pointsTrained++
                instance.adjustPower(POWER_PER_POINT) 

            case TRAINID_POWER5
                instance.pointsTrained += 5
                instance.adjustPower(POWER_PER_POINT*5) 

            case TRAINID_RESET
                instance.resetPoints()




function itemBoughtFilter() returns boolean
    integer itemId = GetSoldItem().getTypeId()
    return itemId == TRAINID_HEALTH or itemId == TRAINID_ARMOR or itemId == TRAINID_ATTACKSPEED or itemId == TRAINID_POWER or itemId == TRAINID_HEALTH5 or itemId == TRAINID_ARMOR5 or itemId == TRAINID_ATTACKSPEED5 or itemId == TRAINID_POWER5 or itemId == TRAINID_RESET

init 
    CreateTrigger()
    ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_SELL_ITEM)
    ..addCondition(Condition(function itemBoughtFilter))
    .addAction(function HeroTrainingPoints.train)

    // Setup item tooltips



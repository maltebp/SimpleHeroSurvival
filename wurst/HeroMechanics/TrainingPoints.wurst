package TrainingPoints

import HashMap
import Stats
import FoodResource
import GameSettings
import UtilCommands

constant real ARMOR_PER_POINT = 1
constant int    HEALTH_PER_POINT = 15
constant int POWER_PER_POINT = 1
constant real ATTACKSPEED_PER_POINT = 0.01 

// Update these at some point
constant integer    TRAINID_HEALTH = 'I002'
constant integer    TRAINID_HEALTH5 = 'I00F'
constant integer    TRAINID_ARMOR = 'I003'
constant integer    TRAINID_ARMOR5 = 'I00K'
constant integer    TRAINID_POWER = 'I004'
constant integer    TRAINID_POWER5 = 'I00C'
constant integer    TRAINID_ATTACKSPEED = 'I001'
constant integer    TRAINID_ATTACKSPEED5 = 'I00G'
constant integer    TRAINID_RESET = 'I005'


public function player.addTrainingPoints(int numberOfPoints)
    this.addFood(numberOfPoints)

public function player.removeTrainingPoints(int pointsToRemove)
    for i=1 to pointsToRemove
        this.removeFood()


class HeroTrainingPoints
    private static HashMap <unit, thistype> instances = new HashMap<unit, thistype>
    
    private player  owner
    private unit    hero
    private int     health
    private int     power
    private real    armor
    private real    attackSpeed
    private int    pointsTrained

    construct(unit whichUnit)
        this.hero = whichUnit
        this.owner = whichUnit.getOwner()
        instances.put(whichUnit, this)


    ondestroy
        instances.remove(hero)


    protected function resetPoints()
        owner.addTrainingPoints(pointsTrained)
        pointsTrained = 0

        adjustHealth(-health)
        adjustAttackSpeed(-attackSpeed)
        adjustArmor(-armor)
        adjustPower(-power)

        destroy this


    /** Can be negative */
    protected function adjustHealth(int adjustAmount)
        hero.adjustStatFlat(STAT_HEALTH, adjustAmount.toReal())
        health += adjustAmount

    protected function adjustArmor(real adjustAmount)
        hero.adjustStatFlat(STAT_ARMOR, adjustAmount)
        armor += adjustAmount
        

    protected function adjustPower(int adjustAmount)
        hero.adjustStatFlat(STAT_DAMAGE, adjustAmount.toReal())
        power += adjustAmount
        

    protected function adjustAttackSpeed(real adjustAmount)
        hero.adjustStatPercentage(STAT_ATTACKSPEED, adjustAmount)
        attackSpeed += adjustAmount
        
    /** Gets the instances containing information about training points for
        a speficic unit. If that doesn't exists, it will create one, and
        return that. */
    protected static function getUnitInstance(unit whichUnit) returns thistype
        
        if not instances.has(whichUnit)
            new HeroTrainingPoints(whichUnit)
         
        return instances.get(whichUnit)
    

    protected static function train()
        let unitToTrain = GetBuyingUnit()
        let owner = unitToTrain.getOwner()
        let instance = getUnitInstance(unitToTrain)
        let whatToTrain = GetSoldItem().getTypeId()

        if( whatToTrain == TRAINID_RESET )
            instance.resetPoints()
        else
            let foodCost = whatToTrain.isTraining5() ? 5 : 1

            if( owner.getFood() < foodCost )
                SND_ERROR.playForPlayer(owner)
            else
                switch whatToTrain
                    
                    case TRAINID_HEALTH
                        instance.pointsTrained++
                        instance.adjustHealth(HEALTH_PER_POINT)

                    case TRAINID_HEALTH5
                        instance.pointsTrained += 5
                        instance.adjustHealth(HEALTH_PER_POINT*5)

                    case TRAINID_ARMOR
                        instance.pointsTrained++
                        instance.adjustArmor(ARMOR_PER_POINT)

                    case TRAINID_ARMOR5
                        instance.pointsTrained += 5
                        instance.adjustArmor(ARMOR_PER_POINT*5)

                    case TRAINID_ATTACKSPEED
                        instance.pointsTrained++
                        instance.adjustAttackSpeed(ATTACKSPEED_PER_POINT)

                    case TRAINID_ATTACKSPEED5
                        instance.pointsTrained += 5
                        instance.adjustAttackSpeed(ATTACKSPEED_PER_POINT*5)

                    case TRAINID_POWER
                        instance.pointsTrained++
                        instance.adjustPower(POWER_PER_POINT) 

                    case TRAINID_POWER5
                        instance.pointsTrained += 5
                        instance.adjustPower(POWER_PER_POINT*5) 
                        
                owner.removeTrainingPoints(foodCost)


function int.isTraining5() returns bool
    return this == TRAINID_HEALTH5 or this == TRAINID_ARMOR5 or this == TRAINID_ATTACKSPEED5 or this == TRAINID_POWER5

function itemBoughtFilter() returns boolean
    let itemId = GetSoldItem().getTypeId()
    return itemId == TRAINID_HEALTH or itemId == TRAINID_ARMOR or itemId == TRAINID_ATTACKSPEED or itemId == TRAINID_POWER or itemId == TRAINID_HEALTH5 or itemId == TRAINID_ARMOR5 or itemId == TRAINID_ATTACKSPEED5 or itemId == TRAINID_POWER5 or itemId == TRAINID_RESET

init 
    CreateTrigger()
    ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_SELL_ITEM)
    ..addCondition(Condition(function itemBoughtFilter))
    .addAction(function HeroTrainingPoints.train)

    // Setup item tooltips


//================================================================================================================================================================================================
// CHAT COMMAND

init
    if DEBUG
        defineUtilCommand("training")
        ..addArgument(ArgumentType.INT)
        ..setAction() (p, args, opts) ->
            p.addFood(args.getInt())
    
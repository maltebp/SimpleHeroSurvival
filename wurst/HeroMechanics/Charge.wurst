
// =======================================================================================================================

package Charge

// =======================================================================================================================


import TimerUtils
import LinkedList
import HashMap
import ErrorHandling

// ------------------------------------------------------------------------------------------------------------------------


constant real DEGENERATION_BASE = 3 // Per second
constant real DEGENERATION_FREQ = 0.25
constant int DEGENERATION_TIMESPERSEC = R2I(1 / DEGENERATION_FREQ)
constant int MAXCHARGE  = 100 // Should be adjusted with game constants

// -----------------------------------------------------------------------------------------------------------------------


/* THINGS MISSING IN WURST LIB

    1) GetHeroXp
    2) Strip of hero level

*/


public function unit.enableCharge()

public function unit.enableCharge(real baseDegeneration)

public function unit.stopChargeDegeneration()
    this.stopChargeDegeneration(0)

public function unit.stopChargeDegeneration(real duration)

public function unit.startChargeDegeneration()

public function unit.reduceChargeDegeneration(real percentReduction, real duration ) returns ChargeAdjustment
    return null

public function unit.increaseChargeDegeneration(real percentIncrease, real duration ) returns ChargeAdjustment
    return null

public function unit.increaseChargeDegeneration(int flatIncrease, real duration)

public function unit.reduceChargeDegeneration(int flatReduction, real duration)

public function unit.addCharge( int amount )
    UnitCharge.getUnitInstance(this).adjustCharge(amount)

public function unit.reduceCharge(int amount )
    UnitCharge.getUnitInstance(this).adjustCharge(-amount)

public function unit.setCharge( int amount )
    UnitCharge.getUnitInstance(this).setCharge(amount)
    



/** Resets the charge, set charge to 0 and clearing all increases/decreases in degeneration*/
public function unit.resetCharge()

/** Gets the unit's current charge level. It returns 0 if the unit is not connected to the Charge system (or the unit is not a hero) */
public function unit.getCharge() returns int
    if not this.isType(UNIT_TYPE_HERO)
        return 0
    if not UnitCharge.unitHasInstance(this)
        return 0
    return GetHeroXP(this)


/** The class which keeps track of individual unit's Charge */
class UnitCharge

    private static IterableMap<unit,thistype> instances
    private static timer updateTimer
    
    private LinkedList<ChargeAdjustment> adjustments = new LinkedList<ChargeAdjustment>

    private real baseDegeneration

    private unit chargeUnit

    private real degenerationFlatAdjust = 0
    private real degenerationPercAdjust = 0

    private real chargeToAdjust = 0

    private boolean degenerationStopped = false

    


    construct(unit chargeUnit, real baseDegeneration)
        this.chargeUnit = chargeUnit
        this.baseDegeneration = baseDegeneration

        if instances == null
            instances = new IterableMap<unit,thistype>
            updateTimer = getTimer()..startPeriodic(DEGENERATION_FREQ, function updateAll ) 
        
        instances.put(chargeUnit, this)

        chargeUnit.suspendXp(true)
        setCharge(0)
        

    ondestroy

    

    function setBaseDegeneration(real degeneration)
        baseDegeneration = degeneration
        


    function setCharge(int charge)

        int currentCharge = GetHeroXP(chargeUnit)

        if charge != currentCharge

            // Adjusting charge to be between max (MAXCHARGE) and min (0)
            int finalCharge = (charge > MAXCHARGE) ? MAXCHARGE : charge
            finalCharge = (finalCharge < 0 ) ? 0 : finalCharge

            boolean xpIsSuspended = chargeUnit.isSuspendedXp()

            if xpIsSuspended
                chargeUnit.suspendXp(false)
            
            // If unit has max charge and wants to reduce it
            if currentCharge == MAXCHARGE and finalCharge < MAXCHARGE
                UnitStripHeroLevel(chargeUnit, 1)
                chargeUnit.addXp(finalCharge,false)

            else
                chargeUnit.addXp(finalCharge-currentCharge, false)

            if xpIsSuspended
                chargeUnit.suspendXp(true)



    function adjustCharge(int charge)
        setCharge(GetHeroXP(chargeUnit)+charge)



    function update()
        
        if chargeUnit == null
            error("Charge unit is null")
            destroy this

        else if not chargeUnit.isAliveTrick()
            clearAdjustments()

        else
            real percentAdjust = (degenerationPercAdjust > 1) ? 0 : 1-degenerationPercAdjust
            real chargeAdjust = (baseDegeneration + degenerationFlatAdjust)*percentAdjust

            chargeToAdjust += chargeAdjust / DEGENERATION_TIMESPERSEC

            int chargeToAdjustInt = R2I(chargeToAdjust)
            chargeToAdjust -= chargeToAdjustInt

            print("Adjusting with "+chargeToAdjustInt.toString())

            setCharge(GetHeroXP(chargeUnit)-chargeToAdjustInt)

        
        
    function clearAdjustments()

        


    /** Gets the UnitCharge instance for the unit. Creates one if it doesn't exist */
    static function getUnitInstance(unit whichUnit) returns thistype

        if instances == null or not instances.has(whichUnit)
            return new UnitCharge(whichUnit, DEGENERATION_BASE)

        return instances.get(whichUnit)


    static function unitHasInstance(unit whichUnit) returns boolean
        return (instances == null) ? false : instances.has(whichUnit)

    private static function updateAll()

        for chargeUnit in instances
            instances.get(chargeUnit).update()

    
        

        
        

class ChargeAdjustment
    
    private real degenerationFlatAdjust
    private real degenerationPercAdjust
    
    private boolean temporary // to clear on death or not

    private boolean clearOnDeath

    private timer timer_Duration

    private boolean hasBeenCleared = false

    private boolean destroyOnClear
    
    private UnitCharge chargeInstance

    construct(UnitCharge chargeInstance, real degenerationFlatAdjust, real degenerationPercAdjust, boolean temporary, real duration)
        this.degenerationFlatAdjust = degenerationFlatAdjust
        this.degenerationPercAdjust = degenerationPercAdjust
        this.temporary = temporary
        this.chargeInstance = chargeInstance

        if duration > 0
            clearOnDeath = true

        else
            clearOnDeath = false



    /* Clearing doesn't destroy the instance */
    function clear()
        hasBeenCleared = true

    function destroyOnClear()
        destroyOnClear = true



// ================================================================================================
// TESTING



unit testUnit

public function setTestUnit(unit whichUnit)
    testUnit = whichUnit
    

function addCharge()

    string input = GetEventPlayerChatString()
    
    if input.length() > 10
        
        int numberInput = input.ltrim("addcharge ").toInt()
    
        testUnit.addCharge(numberInput)

        print("Current charge: "+testUnit.getCharge().toString())
        

    else
        print("wrong input")



init
    CreateTrigger()
    ..registerPlayerChatEvent(Player(0), "addcharge ", false)
    ..addAction(function addCharge)
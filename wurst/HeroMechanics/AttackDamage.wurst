package AttackDamage
import HashMap
import RegisterEvents
import TimerUtils
import TimerUnitData
import Game

HashMap<unit, int> unitDamage = new HashMap<unit, int>

/** Gets the total attack damage of the unit (base + bonus)
    damage.*/
public function unit.getTotalAttackDamage() returns int
    return this.getBaseDamage(1) + this.getBonusAttackDamage()

/** Returns the bonus attack damage the unit has. It only
    includes bonus damage set through this package.*/
public function unit.getBonusAttackDamage() returns int
    if unitDamage.has(this)
        return unitDamage.get(this)
    else
        return 0

function unit.setBonusAttackDamage(int damage)
    
    if this.getAbilityLevel('A004') < 1
        this.addAbility('A004')
        this.setAbilityLevel('A003', 1)
        this.setAbilityLevel('A001', 1)   
        this.setAbilityLevel('A002', 1)  

     
    
    int remainingDamage = damage

    int dmg100 = 0

    if(remainingDamage >= 100)
        dmg100 += remainingDamage div 100
        remainingDamage -= dmg100*100

    int dmg10 = 0
    if remainingDamage >= 10
        dmg10 += remainingDamage div 10
        remainingDamage -= dmg10*10


    int dmg1 = 0
    if remainingDamage > 0 
        dmg1 += remainingDamage div 1

    this.setAbilityLevel('A003', (dmg100+1))
    this.setAbilityLevel('A001', (dmg10+1))   
    this.setAbilityLevel('A002', (dmg1+1))



function updateAttackDamage()
    timer expiredTimer = GetExpiredTimer()
    unit unitToUpdate = expiredTimer.getUnitData()
    expiredTimer.release()

    int totalDamage = 0
        
    for itemSlot=0 to 5
        int itemInSlot = UnitItemInSlot(unitToUpdate, itemSlot).getTypeId()
        if AttackDamageItem.items.has(itemInSlot)
            totalDamage += AttackDamageItem.items.get(itemInSlot)            

    if unitDamage.has(unitToUpdate)
        unitDamage.getAndRemove(unitToUpdate)
    else
        unitToUpdate.setBonusAttackDamage(0)
        
    unitDamage.put(unitToUpdate, totalDamage)
    unitToUpdate.setBonusAttackDamage(totalDamage)


function manipulatesItem()
    unit manipulatingUnit = GetManipulatingUnit()
    
    if manipulatingUnit.isType(UNIT_TYPE_HERO)

        /*  A small delay, that makes sure the item is actually removed from the inventory
            before the damage is recalculated.*/

        getTimer()
        ..setUnitData(GetManipulatingUnit())
        ..start(0.01, function updateAttackDamage )


class AttackDamageItem

    protected static HashMap<int,int> items = new HashMap<int,int>

    construct( int itemId, int attackDamage )
        items.put(itemId, attackDamage)


function displayDamage()
    print("100: "+hero.getAbilityLevel('A003').toString())
    print("10: "+hero.getAbilityLevel('A001').toString())
    print("1: "+hero.getAbilityLevel('A002').toString())

init
    Player(0).setAbilityAvailable('A004', false)

    new AttackDamageItem( 'I000', 5 )
    new AttackDamageItem( 'I00L', 10 )
    new AttackDamageItem( 'I00F', 10 ) 
    new AttackDamageItem( 'I00U', 8 ) // Way of the Cheetah

    // Editor's Items
    new AttackDamageItem( 'I00S', 30)
    new AttackDamageItem( 'I00P', 80)

    CreateTrigger()
    ..registerPlayerChatEvent(Player(0), "dmg", true)
    ..addAction(function displayDamage) 

    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_PAWN_ITEM, function manipulatesItem)
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DROP_ITEM, function manipulatesItem)
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_PICKUP_ITEM, function manipulatesItem)
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_SELL_ITEM, function manipulatesItem)
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_USE_ITEM, function manipulatesItem)
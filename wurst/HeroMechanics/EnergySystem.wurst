package EnergySystem

import TimerUtils
import HashMap

constant real  DEFAULTENERGY = 100
constant real DEFAULTREGEN = 15 // Per second

/** @param percentReduction: 1 = 100% REDUCTION, mana regen will be at 200% */
public function unit.reduceEnergyRegen(real percentReduction)
    EnergySystem.adjustRegen(this, -percentReduction, 0)

/** @param percentIncrease: 1 = 100% INCREASE, mana regen will be at 200% */
public function unit.increaseEnergyRegen( real percentIncrease)
    EnergySystem.adjustRegen(this, percentIncrease, 0)
    
/** Increases the units energy regeneration by flatIncrease
    per second */
public function unit.increaseEnergyRegen( int flatIncrease )

/** Restores a flat amount of energy for the unit once */
public function unit.restoreEnergy(real energyToRestore)
    if EnergySystem.containsUnit(this)
        EnergySystem.getUnitInstance(this).addEnergyToRestore(energyToRestore)
        
        

    
public class EnergySystem

    /*  It increases energy regeneration, not by increasing the amount regenerated
        but by increasing the frequency of the regen */ 
    

    private static HashMap<unit, EnergySystem> units = new HashMap<unit, EnergySystem>

    private real energyRegenFlatInc = 0
    private real energyRegenPercInc = 0
    private real extraEnergyToRestore = 0
    private unit theUnit
    private real regenFreq
    private timer timer_Regen 

    /** Setup the unit to the system with default settings*/
    private construct(unit whichUnit)
        
        theUnit = whichUnit
        timer_Regen = getTimer()..setData(this castTo int)
        

    /** Updates the unit's regeneration to newly set regen */
    private static function updateUnit(unit whichUnit)
        

        if not containsUnit(whichUnit)
    
            addUnit(whichUnit)
        
        thistype instance = units.get(whichUnit)  

        real energyToRegen = (DEFAULTREGEN+instance.energyRegenFlatInc)*(1+instance.energyRegenPercInc)
        instance.regenFreq = (1/energyToRegen)*2
        
        instance.timer_Regen.startPeriodic(instance.regenFreq, function regen)
        

    /** Adds a unit to the energy system */
    static function addUnit(unit whichUnit)

        if whichUnit.getMaxMana()>0
            
            units.put( whichUnit, new EnergySystem(whichUnit) )
            updateUnit(whichUnit)
    
        else

    protected function addEnergyToRestore(real energyToRestore)
        extraEnergyToRestore += energyToRestore
            

    /** Gets the instance of a certain unit*/
    protected static function getUnitInstance(unit whichUnit) returns thistype
        if containsUnit(whichUnit)
            return units.get(whichUnit)
        return null
        
        
        
    /** Checks if a unit is in the system already*/
    protected static function containsUnit( unit whichUnit ) returns boolean
        return units.has(whichUnit)

    protected static function adjustRegen(unit whichUnit, real percentAdjust, real flatAdjust)
        if containsUnit(whichUnit)
            thistype instance = units.get(whichUnit)
            instance.energyRegenFlatInc += flatAdjust
            instance.energyRegenPercInc += percentAdjust
            updateUnit(whichUnit)
    

    /** Regenerate energy for the unit */
    private static function regen()
        thistype instance = GetExpiredTimer().getData() castTo thistype
        if instance.theUnit.isAlive() and instance.theUnit.getMana()<instance.theUnit.getMaxMana()
            instance.theUnit.setMana(instance.theUnit.getMana()+2+instance.extraEnergyToRestore)
            instance.extraEnergyToRestore = 0
        
        

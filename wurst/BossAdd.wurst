package BossAdd
import General
import TimerUtils
import LinkedList

public interface RemoteFunction<T>
    function run(T t)
    
    


public class AddSpawner
    LinkedList<Add> adds = new LinkedList<Add>

    int spawnerId 
    timer timer_Spawn
    int  damage = 10
    real armor = 0
    int health = 100
    int mana   = 100
    real moveSpeed = 270
    real attackSpeed = 2
    real spawnFreq = 10
    player owner
    int addId
    boolean randomSpawnPos
    rect spawnRect
    string spawnSfx
    unit target
    RemoteFunction<unit> funcOnSpawn
    
    

    construct()
        timer_Spawn = getTimer()
        ..setData(this castTo int)

    function setUnit( int addId, player owner, int health, int mana, int damage, real armor, real attackSpeed, real moveSpeed ) 
        this.addId = addId
        this.owner = owner
        this.health = health
        this.mana = mana
        this.damage = damage
        this.armor = armor
        this.attackSpeed = attackSpeed
        this.moveSpeed = moveSpeed

    function setSpawnSpecific()

    function setTarget(unit target)
        this.target = target
        
    function setOnSpawnFunc(RemoteFunction<unit> whatFunc)
        funcOnSpawn = whatFunc
    
    function setSpawnRandom( rect spawnRect, real spawnFreq )
        this.spawnRect = spawnRect
        this.spawnFreq = spawnFreq

    static function spawnAdd()
        thistype spawner = GetExpiredTimer().getData() castTo thistype
        vec2 spawnPoint = spawner.spawnRect.randomPoint()
        Add add = new Add(spawner.addId,
        spawner.owner,
         spawnPoint,
          spawner.damage,
           spawner.armor,
            spawner.health,
            spawner.mana,
             spawner.moveSpeed,
              spawner.attackSpeed)

        if(spawner.funcOnSpawn != null)
            spawner.funcOnSpawn.run(add.mob)
    
        spawner.adds.add(add)

        
        print("Created add!")
        
        add
        ..createSpawnEffect(spawner.spawnSfx)
        ..setTarget(spawner.target)

    function start()
        timer_Spawn.startPeriodic(spawnFreq, function spawnAdd)

    function setSpawnEffect( string sfx )
        spawnSfx = sfx


    function stop()
        timer_Spawn.pause()
    function activate()
        

    ondestroy
        removeAll()
        destroy adds
        if funcOnSpawn != null
            destroy funcOnSpawn
        timer_Spawn.release()


    function killAll()
        for add in adds
            adds.remove(add)
            add.kill()
    
    function removeAll()
        for add in adds
            adds.remove(add)
            destroy add


public class Add

    unit mob
    unit target
    timer timer_Attack
    vec2 spawnPoint

    static real UPDATE_FREQ = 0.5
        

    ondestroy
        timer_Attack.release()
        mob.remove()
        

    construct( int id, player owner, vec2 spawnPoint, int damage, real armor, int health, int mana, real moveSpeed, real attackSpeed)
        mob = createUnit( owner, id, spawnPoint, GetRandomAngle() )
        ..setMaxHP(health, true)
        ..setBaseDamage(damage, 1)   
        ..setArmor(armor)
        ..setMoveSpeed(moveSpeed)
        ..setAttackCooldown(attackSpeed, 1)

        if mana>0 and mob.getMaxMana()>0 
            // If you change the max mana of a unit without mana
            // the code stops - this is to prevent that from
            // happening
            mob.setMaxMana(mana, true)

        print("Created mob")

        timer_Attack = getTimer()
        ..setData(this castTo int)
        ..startPeriodic(UPDATE_FREQ, function attack)

        print("Started timer!")

        this.spawnPoint = spawnPoint

    function kill()

    function createSpawnEffect( string sfx)
        addEffect(sfx, spawnPoint)
        ..destr()

    function setTarget(unit target)
        this.target = target


    private static function attack()
        Add add = GetExpiredTimer().getData() castTo thistype
        add.mob.issueTargetOrder("attack", add.target)
        

    static function startSpawn()
        
    
package Round

import public UnitSpawner
import ErrorHandling
import initlater Game
import Transitions
import TimerUtils
import Orb
import Music

public class Round

//=========================================================================================================================================================

//  Settings 

    private static constant real HEALTHORB_SPAWNFREQ = 15 
    private static constant real HEALTHORB_SPAWNDURATION = 200

    private static constant string TEXTCOLOR_GOLD = "|cffffcc00"
    private static constant string TEXTCOLOR_TRAINPOINT = "|cff00FA9A"

//=========================================================================================================================================================

 

    private static LinkedList<Round> rounds = new LinkedList<Round>
    
    private static int nextRoundNumber = 1
    private static int totalNumberOfRounds = 0
    private static int currentRoundNumber = 0
    private static boolean roundWon = false
    private static Round currentRound

    private static boolean aRoundIsRunning = false

    private LinkedList<UnitSpawner> spawners = new LinkedList<UnitSpawner>
    private int number
    private int goldReward
    private int trainingPointsReward
    private real healthOrb_FlatToHealInstant
    private real healthOrb_PercToHealInstant
    private real healthOrb_FlatToHealOverTime
    private real healthOrb_PercToHealOverTime
    private real healthOrb_SpawnDuration
    private timer timer_HealthOrbDuration
    private timer timer_HealthOrbSpawn
    private string title
    private string description


    private static SoundDefinition snd_GoldReward = new SoundDefinition(Sounds.receiveGold, false)

// ======================================================================================================================================

// Methods

    //---------------------------------------------------------------------------------------------------------------------------------------
    //  Creation and management functions

    construct() 
         
        totalNumberOfRounds++
        number = totalNumberOfRounds

        if number == 1
            currentRound = this
            currentRoundNumber = 1

        timer_HealthOrbDuration = getTimer()..setData(this castTo int)
        timer_HealthOrbSpawn = getTimer()..setData(this castTo int)
        rounds.add(this)
    
    
    
//---------------------------------------------------------------------------------------------------------------------------------------
// Setters & Adders

    function setReward( int goldReward, int trainingPointsReward)
        this.goldReward = goldReward
        this.trainingPointsReward = trainingPointsReward

    static function setARoundRunning()
        aRoundIsRunning = true

    function addSpawner(UnitSpawner spawner) returns UnitSpawner
        spawners.add(spawner)
        return spawner

    /** Manually changes the current round to a certain round. If no round
        of that number exists, it will not do change anything */
    static function setCurrentRound(int roundNumber)
        currentRoundNumber = (roundNumber>totalNumberOfRounds) ? currentRoundNumber : roundNumber

    function setTitle(string title)
        this.title = title
        
    function setDescription(string description)
        this.description = description


    function setHealthOrbSpawn( real duration, real healthFlatToHealInstant, real healthPercToHealInstant, real healthFlatToHealOverTime, real healthPercToHealOverTime )
        this.healthOrb_SpawnDuration = duration
        this.healthOrb_FlatToHealInstant = healthFlatToHealInstant
        this.healthOrb_PercToHealInstant = healthPercToHealInstant
        this.healthOrb_FlatToHealOverTime = healthFlatToHealOverTime
        this.healthOrb_PercToHealOverTime = healthPercToHealOverTime



//---------------------------------------------------------------------------------------------------------------------------------------
// Getters

    function getNumber() returns int
        return number

    static function isARoundRunning() returns boolean
        return aRoundIsRunning

    static function getCurrentRoundNumber() returns int
        return currentRoundNumber

    static function getNumberOfRounds() returns int
        return totalNumberOfRounds

    static function getCurrentRound() returns Round
        return currentRound


//---------------------------------------------------------------------------------------------------------------------------------------
//  Running
    
    /** Starts the currentRound */
    static function startRound()
        if totalNumberOfRounds != 0
            
            if not currentRoundNumber > totalNumberOfRounds
                initializeRound()

            else
                error("No more rounds")

        else
            error("No rounds added")
            

    static function initializeRound()
            print( "Starting round "+currentRoundNumber.toString() )
            aRoundIsRunning = true
            roundWon = false
            rounds.get(currentRoundNumber-1)
            ..activateSpawners()
            ..activateHealthOrbSpawn()

            
        
    private function activateSpawners()

        if not spawners.isEmpty()
            for spawner in spawners
                spawner.start()
        

    static function clearCurrentRound()
        Round round = rounds.get(currentRoundNumber-1)
        Orb.destroyAll()
        for spawner in round.spawners
            spawner.clear()

        
    private function activateHealthOrbSpawn()
        timer_HealthOrbDuration.start(healthOrb_SpawnDuration+0.1, function stopHealthOrbSpawn )
        timer_HealthOrbSpawn.startPeriodic(HEALTHORB_SPAWNFREQ, function spawnHealthOrb)
        


    private static function spawnHealthOrb()
        thistype round = GetExpiredTimer().getData() castTo thistype

        vec2 spawnPos = gg_rct_Arena_CamBounds.randomPoint()

        new HealthOrb(spawnPos)
        ..setHealInstant(round.healthOrb_FlatToHealInstant, round.healthOrb_PercToHealInstant )
        ..setHealOverTime(round.healthOrb_FlatToHealOverTime, round.healthOrb_PercToHealOverTime, 6 )
        ..addActivationUnit(hero)
        

    private static function stopHealthOrbSpawn()
        thistype round = GetExpiredTimer().getData() castTo thistype
        round.timer_HealthOrbSpawn.pause()

        

    private static function wasLastUnit() returns boolean
        if hero.isAliveTrick()
            Round round = rounds.get(currentRoundNumber-1)
            for spawner in round.spawners
                if not spawner.isFinished() or not spawner.allSpawnedUnitsAreDead()
                    return false
            return true
        return false
                

    private function giveReward()
        snd_GoldReward.play()
        print("You've been granted "+TEXTCOLOR_GOLD+goldReward.toString()+"|r gold"+" and "+TEXTCOLOR_TRAINPOINT+trainingPointsReward.toString()+"|r training points.")
        Player(0).addGold(goldReward)
        Player(0).addLumber(trainingPointsReward)


    static function reviewRound()
        Round round = rounds.get(currentRoundNumber-1)
        if roundWon
            print("You completed round "+currentRoundNumber.toString())
            round.giveReward()
        else
            print("You lost the round - try again.")
        
            
    function printInfo()
        print("Next round is round is: ")
        rounds.get(currentRoundNumber).printInfo()
        print("")
        print("|cffffcc00Round "+number.toString() + " - "+title+"|r")
        print(description)

    static function nextRound()
        aRoundIsRunning = false
        if( roundWon )
            currentRoundNumber++

            
            
            
    

    private static function roundLost()
        roundWon = false
        stopMusic()
        transitionToShop(false)

    private static function roundWon()
        roundWon =true
        stopMusic()
        transitionToShop(true)
            
    
    protected static function anyUnitDies()
        unit dying = GetDyingUnit()
        
        if dying == hero
            roundLost()
        else if wasLastUnit()
            roundWon()
            
            

 
                
init
    CreateTrigger()
    ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)
    ..addAction(function Round.anyUnitDies)
        
        
        
        
package Round

import LinkedList
import public UnitSpawner
import ErrorHandling
import initlater Game
import SoundUtils




public class Round

//=========================================================================================================================================================

//  Settings 

    private static constant SoundDefinition snd_RoundWon = new SoundDefinition(Sounds.questCompleted, false)
    private static constant SoundDefinition snd_RoundLost = new SoundDefinition(Sounds.questFailed, false)

    private static constant string TEXTCOLOR_GOLD = "|c00FF7F00"
    private static constant string TEXTCOLOR_TRAINPOINT = "|c001CE6B9"

//=========================================================================================================================================================

 

    private static LinkedList<Round> rounds = new LinkedList<Round>
    
    private static int nextRoundNumber = 1
    private static int totalNumberOfRounds = 0
    private static int currentRound = 0
    private static boolean roundWon = false

    private static boolean aRoundIsRunning = false

    private LinkedList<UnitSpawner> spawners = new LinkedList<UnitSpawner>
    private int number
    private int goldReward
    private int trainingPointsReward


// ======================================================================================================================================

// Methods

    //---------------------------------------------------------------------------------------------------------------------------------------
    //  Creation and management functions

    construct()
        
        number = nextRoundNumber
        nextRoundNumber++
        totalNumberOfRounds++
        rounds.add(this)
    
    
    
//---------------------------------------------------------------------------------------------------------------------------------------
// Setters

    function setReward( int goldReward, int trainingPointsReward)
        this.goldReward = goldReward
        this.trainingPointsReward = trainingPointsReward

    function addSpawner(UnitSpawner spawner) returns UnitSpawner
        spawners.add(spawner)
        return spawner

    /** Manually changes the current round to a certain round. If no round
        of that number exists, it will not do change anything */
    static function setCurrentRound(int roundNumber)
        currentRound = (roundNumber>totalNumberOfRounds) ? currentRound : roundNumber

//---------------------------------------------------------------------------------------------------------------------------------------
// Getters

    function getNumber() returns int
        return number

    static function isARoundRunning() returns boolean
        return aRoundIsRunning

//---------------------------------------------------------------------------------------------------------------------------------------
//  Running
    
    /** Starts the currentRound */
    static function startRound()
        if totalNumberOfRounds != 0
            if currentRound == 0
                currentRound = 1
            
            if not currentRound > totalNumberOfRounds
                initializeRound()

            else
                error("No more rounds")

        else
            error("No rounds added")
            

    static function initializeRound()
            print("Starting round "+currentRound.toString())
            aRoundIsRunning = true
            roundWon = false
            rounds.get(currentRound-1).activateSpawners()

            
    private function activateSpawners()

        if not spawners.isEmpty()
            for spawner in spawners
                spawner.start()
        

    private static function clearRound()
        Round round = rounds.get(currentRound-1)

        for spawner in round.spawners
            spawner.clear()

        if roundWon
            currentRound++

        aRoundIsRunning = false

    private static function endRound()
        snd_RoundWon.play()
        aRoundIsRunning = false
        
        print("You completed round "+currentRound.toString())
        rounds.get(currentRound-1).giveReward()

        roundWon =true

        clearRound()
        

    private static function spawnedUnitDies()
        Round round = rounds.get(currentRound-1)

        boolean allSpawnersFinished = true
        for spawner in round.spawners
            if not spawner.isFinished() or not spawner.allSpawnedUnitsAreDead()
                allSpawnersFinished = false
            
        if allSpawnersFinished
            endRound()


    private function giveReward()
        print("You've been granted "+TEXTCOLOR_GOLD+goldReward.toString()+" gold|r"+" and "+TEXTCOLOR_TRAINPOINT+trainingPointsReward.toString()+" training points|r.")
        Player(0).addGold(goldReward)
        Player(0).addLumber(goldReward)


    private static function heroDies()
        print("You lost round"+currentRound.toString()+". Try again")
        snd_RoundLost.play()
        clearRound()
        hero.revive(vec2(-70,451), true)



    protected static function anyUnitDies()
        unit dying = GetDyingUnit()
        
        if dying == hero
            heroDies()
        else
            spawnedUnitDies()
            

 
                
init
    CreateTrigger()
    ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)
    ..addAction(function Round.anyUnitDies)
        
        
        
        
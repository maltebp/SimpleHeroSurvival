package Round

import LinkedList
import public UnitSpawner
import ErrorHandling
import initlater Game
import SoundUtils
import Transitions
import TimerUtils
import Orb
import Music




public class Round

//=========================================================================================================================================================

//  Settings 

    private static constant real HEALTHORB_SPAWNFREQ = 4 
    private static constant real HEALTHORB_SPAWNDURATION = 20

    private static constant string TEXTCOLOR_GOLD = "|c00FF7F00"
    private static constant string TEXTCOLOR_TRAINPOINT = "|c001CE6B9"

//=========================================================================================================================================================

 

    private static LinkedList<Round> rounds = new LinkedList<Round>
    
    private static int nextRoundNumber = 1
    private static int totalNumberOfRounds = 0
    private static int currentRound = 0
    private static boolean roundWon = false

    private static boolean aRoundIsRunning = false

    private LinkedList<UnitSpawner> spawners = new LinkedList<UnitSpawner>
    private int number
    private int goldReward
    private int trainingPointsReward
    private real healthOrb_FlatToHealInstant
    private real healthOrb_PercToHealInstant
    private real healthOrb_FlatToHealOverTime
    private real healthOrb_PercToHealOverTime
    private timer timer_HealthOrbDuration
    private timer timer_HealthOrbSpawn

    private static SoundDefinition snd_GoldReward = new SoundDefinition(Sounds.receiveGold, false)

// ======================================================================================================================================

// Methods

    //---------------------------------------------------------------------------------------------------------------------------------------
    //  Creation and management functions

    construct()
        
        number = nextRoundNumber
        nextRoundNumber++
        totalNumberOfRounds++
        timer_HealthOrbDuration = getTimer()..setData(this castTo int)
        timer_HealthOrbSpawn = getTimer()..setData(this castTo int)
        rounds.add(this)
    
    
    
//---------------------------------------------------------------------------------------------------------------------------------------
// Setters

    function setReward( int goldReward, int trainingPointsReward)
        this.goldReward = goldReward
        this.trainingPointsReward = trainingPointsReward

    static function setARoundRunning()
        aRoundIsRunning = true

    function addSpawner(UnitSpawner spawner) returns UnitSpawner
        spawners.add(spawner)
        return spawner

    /** Manually changes the current round to a certain round. If no round
        of that number exists, it will not do change anything */
    static function setCurrentRound(int roundNumber)
        currentRound = (roundNumber>totalNumberOfRounds) ? currentRound : roundNumber

    function setHealthOrbSpawn( real healthFlatToHealInstant, real healthPercToHealInstant, real healthFlatToHealOverTime, real healthPercToHealOverTime )
        this.healthOrb_FlatToHealInstant = healthFlatToHealInstant
        this.healthOrb_PercToHealInstant = healthPercToHealInstant
        this.healthOrb_FlatToHealOverTime = healthFlatToHealOverTime
        this.healthOrb_PercToHealOverTime = healthPercToHealOverTime


//---------------------------------------------------------------------------------------------------------------------------------------
// Getters

    function getNumber() returns int
        return number

    static function isARoundRunning() returns boolean
        return aRoundIsRunning

    static function getCurrentRoundNumber() returns int
        return currentRound

//---------------------------------------------------------------------------------------------------------------------------------------
//  Running
    
    /** Starts the currentRound */
    static function startRound()
        if totalNumberOfRounds != 0
            if currentRound == 0
                currentRound = 1
            
            if not currentRound > totalNumberOfRounds
                initializeRound()

            else
                error("No more rounds")

        else
            error("No rounds added")
            

    static function initializeRound()
            print("Starting round "+currentRound.toString())
            aRoundIsRunning = true
            roundWon = false
            rounds.get(currentRound-1)
            ..activateSpawners()
            ..activateHealthOrbSpawn()

            
        
    private function activateSpawners()

        if not spawners.isEmpty()
            for spawner in spawners
                spawner.start()
        

    static function clearCurrentRound()
        Round round = rounds.get(currentRound-1)
        Orb.destroyAll()
        for spawner in round.spawners
            spawner.clear()

        
    private function activateHealthOrbSpawn()
        timer_HealthOrbDuration.start(HEALTHORB_SPAWNDURATION, function stopHealthOrbSpawn )
        timer_HealthOrbSpawn.startPeriodic(HEALTHORB_SPAWNFREQ, function spawnHealthOrb)
        


    private static function spawnHealthOrb()
        thistype round = GetExpiredTimer().getData() castTo thistype

        vec2 spawnPos = gg_rct_Arena_CamBounds.randomPoint()

        new HealthOrb(spawnPos)
        ..setHealInstant(round.healthOrb_FlatToHealInstant, round.healthOrb_PercToHealInstant )
        ..setHealInstant(round.healthOrb_FlatToHealOverTime, round.healthOrb_PercToHealOverTime )
        ..addActivationUnit(hero)
        

    private static function stopHealthOrbSpawn()
        thistype round = GetExpiredTimer().getData() castTo thistype
        round.timer_HealthOrbSpawn.pause()

        

    private static function wasLastUnit() returns boolean
        
        if hero.isAliveTrick()
            Round round = rounds.get(currentRound-1)
            for spawner in round.spawners
                if not spawner.isFinished() or not spawner.allSpawnedUnitsAreDead()
                    return false
            return true
        return false
                



    private function giveReward()
        snd_GoldReward.play()
        print("You've been granted "+TEXTCOLOR_GOLD+goldReward.toString()+" gold|r"+" and "+TEXTCOLOR_TRAINPOINT+trainingPointsReward.toString()+" training points|r.")
        Player(0).addGold(goldReward)
        Player(0).addLumber(goldReward)


    static function reviewRound()
        Round round = rounds.get(currentRound-1)
        
        if roundWon
            print("You completed round "+currentRound.toString())
            round.giveReward()

        else
            print("You lost the round - try again.")
        
    static function nextRound()
        aRoundIsRunning = false
        if( roundWon )
            currentRound++
            print("Next round is Round "+currentRound.toString())
    

    private static function roundLost()
        roundWon = false
        stopMusic()
        transitionToShop(false)

    private static function roundWon()
        roundWon =true
        stopMusic()
        transitionToShop(true)
            
    
    protected static function anyUnitDies()
        unit dying = GetDyingUnit()
        
        if dying == hero
            roundLost()
        else if wasLastUnit()
            roundWon()
            
            

 
                
init
    CreateTrigger()
    ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)
    ..addAction(function Round.anyUnitDies)
        
        
        
        
package Round

import public UnitSpawner
import ErrorHandling
import initlater Game
import Transitions
import TimerUtils
import Orb
import Music
import public Artifact
import public ItemReward
import ClosureTimers

public class Round

//=========================================================================================================================================================

//  Settings 

    private static constant real HEALTHORB_SPAWNFREQ = 25 
    private static constant real HEALTHORB_DURATION  = 8
    private static constant real HEALTHORB_SPAWNDURATION = 200

    private static constant string TEXTCOLOR_GOLD = "|cffffcc00"
    private static constant string TEXTCOLOR_TRAINPOINT = "|cff00FA9A"
    private static constant string TEXTCOLOR_ARTIFACT = "|cffb3b3ff"
    private static constant string TEXTCOLOR_ITEM = "|cffd9b38c"
    

//=========================================================================================================================================================

 

    private static LinkedList<Round> rounds = new LinkedList<Round>
    
    private static int nextRoundNumber = 1
    private static int totalNumberOfRounds = 0
    private static int currentRoundNumber = 0
    private static boolean roundWon = false
    private static Round currentRound
    private static boolean isBossRound = false
    private static boolean instantSpawn = false

    

    private static boolean aRoundIsRunning = false
    static unit bossUnit = null

    private LinkedList<UnitSpawner> spawners = new LinkedList<UnitSpawner>
    private int number
    private int goldReward
    private int trainingPointsReward
    private LinkedList<Artifact> artifactReward = new LinkedList<Artifact>
    private LinkedList<ItemReward> itemRewards = new LinkedList<ItemReward>
    private int abilityReward = -1 // Number
    private real healthOrb_FlatToHealInstant
    private real healthOrb_PercToHealInstant
    private real healthOrb_FlatToHealOverTime
    private real healthOrb_PercToHealOverTime
    private real healthOrb_SpawnDuration
    private timer timer_HealthOrbDuration
    private timer timer_HealthOrbSpawn
    private string title
    private string description
    private boolean bossRound = false
    private unit boss = null
    private string music = Sounds.orcVictory


    Round_RemoteFunction codeOnClear = null
    Round_RemoteFunction codeOnPrepare = null
    Round_RemoteFunction codeOnFadeIn = null
    Round_RemoteFunction codeOnStart = null
    Round_RemoteFunction codeOnHeroDeath = null
    Round_RemoteFunction codeOnLastUnitDeath = null


    private static SoundDefinition snd_GoldReward = new SoundDefinition(Sounds.receiveGold, false)
    private static SoundDefinition snd_RoundInfo = new SoundDefinition(Sounds.questLog, false)
    private static SoundDefinition snd_StartRound = new SoundDefinition(Sounds.goodJob, false)
    private static SoundDefinition snd_ItemReward = new SoundDefinition(Sounds.itemReceived, false)


// ======================================================================================================================================

// Methods

    //---------------------------------------------------------------------------------------------------------------------------------------
    //  Creation and management functions

    construct() 
         
        totalNumberOfRounds++
        number = totalNumberOfRounds

        if number == 1
            currentRound = this
            currentRoundNumber = 1

        timer_HealthOrbDuration = getTimer()..setData(this castTo int)
        timer_HealthOrbSpawn = getTimer()..setData(this castTo int)
        rounds.push(this)
    
    
    
//---------------------------------------------------------------------------------------------------------------------------------------
// Setters & Adders

    function setReward( int goldReward, int trainingPointsReward)
        this.goldReward = goldReward
        this.trainingPointsReward = trainingPointsReward

    function setCodeOnClear( Round_RemoteFunction whichCode )
        this.codeOnClear = whichCode

    function setCodeOnStart( Round_RemoteFunction whichCode )
        this.codeOnStart = whichCode

    function setCodeOnPrepare( Round_RemoteFunction whichCode )
        this.codeOnPrepare = whichCode

    function addSpawner(UnitSpawner spawner) returns UnitSpawner
        spawners.add(spawner)
        return spawner

        
    function setBossRound()
        isBossRound = true

    /** Manually changes the current round to a certain round. If no round
        of that number exists, it will not do change anything */
    static function setCurrentRound(int roundNumber)
        currentRoundNumber = (roundNumber>totalNumberOfRounds) ? currentRoundNumber : roundNumber
        currentRound = rounds.get(currentRoundNumber-1)

    function setTitle(string title)
        this.title = title
        
    function setDescription(string description)
        this.description = description

    /** Heal over time is heal per tick. It lasts for 6 seconds, so 6 ticks. */
    function setHealthOrbSpawn( real duration, real healthFlatToHealInstant, real healthPercToHealInstant, real healthFlatToHealOverTime, real healthPercToHealOverTime )
        this.healthOrb_SpawnDuration = duration
        this.healthOrb_FlatToHealInstant = healthFlatToHealInstant
        this.healthOrb_PercToHealInstant = healthPercToHealInstant
        this.healthOrb_FlatToHealOverTime = healthFlatToHealOverTime
        this.healthOrb_PercToHealOverTime = healthPercToHealOverTime

    function setMusic(string music)
        this.music = music
        

    /** Adds one or more artifacts as a reward, when winning the round */
    function addArtifactRewards(vararg Artifact artifacts)
        for artifact in artifacts
            artifactReward.add(artifact)

    /** Adds one or more artifacts as a reward, when winning the round */
    function addItemRewards(vararg ItemReward items)
        for itemReward in items
            itemRewards.add(itemReward)

    function addAbilityReward(int abilityNumber)
        abilityReward = abilityNumber


    function setCodeOnLastUnitDeath(Round_RemoteFunction whichCode)
        codeOnLastUnitDeath = whichCode
        

    /** Make all rounds instantly spawn all units - only for testing! */
    static function toggleInstantSpawn(boolean toggle)
        instantSpawn = toggle

//---------------------------------------------------------------------------------------------------------------------------------------
// Getters

    function getNumber() returns int
        return number

    static function isARoundRunning() returns boolean
        return aRoundIsRunning

    static function getCurrentRoundNumber() returns int
        return currentRoundNumber

    static function getNumberOfRounds() returns int
        return totalNumberOfRounds

    static function getCurrentRound() returns Round
        return currentRound

    function getTitle() returns string
        return "|cffffcc00Round "+number.toString() + " - "+title+"|r"

    static function getRounds() returns LinkedList<Round>
        return rounds.copy()

    


//---------------------------------------------------------------------------------------------------------------------------------------
//  Running

    
    /** Starts the currentRound */
    static function startRound()

    static function setBossUnit(unit boss)
        bossUnit = boss
        isBossRound = true
            
    function initialize()
        activateSpawners()
        activateHealthOrbSpawn()
        playMusic(music)

        if codeOnStart != null
            codeOnStart.run(this)
            
    function stopSpawners()
        for spawner in spawners
            spawner.stop()
        
    private function activateSpawners()

        if not spawners.isEmpty()
            for spawner in spawners
                spawner.start()

                if instantSpawn
                    spawner.spawnAll()
        
    function clear()
        Orb.destroyAll()
        timer_HealthOrbDuration.pause()
        timer_HealthOrbSpawn.pause()
        if bossUnit != null
            bossUnit.remove()
        for spawner in spawners
            spawner.clear()
        if codeOnClear != null
            codeOnClear.run(this)

    function killSpawnedUnits()
        for spawner in spawners
            spawner.killAll()

    static function clearCurrentRound()
        currentRound.clear()
        
        

    private function activateHealthOrbSpawn()
        timer_HealthOrbDuration.start(healthOrb_SpawnDuration+0.1, function stopHealthOrbSpawn )
        timer_HealthOrbSpawn.startPeriodic(HEALTHORB_SPAWNFREQ, function spawnHealthOrb)
        


    private static function spawnHealthOrb()
        thistype round = GetExpiredTimer().getData() castTo thistype

        vec2 spawnPos = gg_rct_Arena_Spawn1.randomPoint()

        new HealthOrb(spawnPos)
        ..setHealInstant(round.healthOrb_FlatToHealInstant, round.healthOrb_PercToHealInstant )
        ..setHealOverTime(round.healthOrb_FlatToHealOverTime, round.healthOrb_PercToHealOverTime, HEALTHORB_DURATION )
        ..addActivationUnit(hero)
        

    private static function stopHealthOrbSpawn()
        thistype round = GetExpiredTimer().getData() castTo thistype
        round.timer_HealthOrbSpawn.pause()

        

    private static function wasLastUnit() returns boolean
        if hero.isAliveTrick()
            Round round = rounds.get(currentRoundNumber-1)
            for spawner in round.spawners
                if not spawner.isFinished() or not spawner.allUnitsAreDead()
                    return false
            return true
        return false
                

    private function reward()
        snd_GoldReward.play()
        printTimed(" ", 5)
        printTimed("You've been granted "+TEXTCOLOR_GOLD+goldReward.toString()+"|r gold"+" and "+TEXTCOLOR_TRAINPOINT+trainingPointsReward.toString()+"|r training points.", 5)
        Player(0).addGold(goldReward)
        Player(0).addLumber(trainingPointsReward)


    /** Rewards items, including artifacts */
    private function rewardItems() returns boolean
        int numberOfArtifacts = artifactReward.size()
        int numberOfItems = itemRewards.size()
        int numberOfRewards = numberOfArtifacts + numberOfItems

        if numberOfRewards > 0
            
            snd_ItemReward.play()
            printTimed(" ", 8)
            string text = "New items unlocked: \n"
            
            int i = 0

            if numberOfItems > 0
                
                for itemReward in itemRewards

                    text += TEXTCOLOR_ITEM+itemReward.getName()+"|r"
                    
                    i++

                    if i < numberOfRewards
                        text += ", "

                    itemReward.release() 


            if numberOfArtifacts > 0 
                for artifact in artifactReward

                    text += TEXTCOLOR_ARTIFACT+artifact.getName()+" (Artifact)|r"

                    i++

                    if i < numberOfRewards
                        text += ", "

                    artifact.release()

            printTimed(text, 8)
            return true

        return false

    function giveAbilityReward() returns boolean

        if abilityReward > -1

            printTimed(" ", 6)

            string text = "New ability: "
            text += gladiator.getColor()+gladiator.releaseAbility(abilityReward)+"|r"

            printTimed(text, 6)

            gladiator.getSoundOnNewAbility().playForPlayer(gladiator.getOwner())
        
            return true

        else
            return false
        

    static function giveReward()
        currentRound.reward()

    static function giveItemReward() returns boolean
        return currentRound.rewardItems()

    function giveRewardNotFancy()
        Player(0).addGold(goldReward)
        Player(0).addLumber(trainingPointsReward)
        for artifact in artifactReward
            artifact.release()

        for itemReward in itemRewards
            itemReward.release()

        if abilityReward > -1
            gladiator.releaseAbility(abilityReward)

    static function wonRound()
        

    static function printNextRound()
        snd_RoundInfo.play()
        printTimed("Next round: ",7)
        printTimed(" ",7)
        currentRound.toString()


    function toString()
        printTimed("|cffffcc00Round "+number.toString() + " - '"+title+"'|r",7)
        printTimed(description,7)

    
    static function setNextRound()

        if currentRoundNumber < totalNumberOfRounds
            currentRoundNumber++
            currentRound = rounds.get(currentRoundNumber-1)
            aRoundIsRunning = false
            
        else
            error("No more rounds")


    static function setRoundReady()
        aRoundIsRunning = false

    private static function roundLost()
        roundWon = false
        if bossUnit != null
            bossUnit.setInvulnerable(true)
        currentRound.stopSpawners()
        if currentRound.codeOnHeroDeath != null
            currentRound.codeOnHeroDeath.run(currentRound)
        stopMusic()
        transitionToShop(false)

    private static function roundWon()
        roundWon =true
        currentRound.stopSpawners()
        if currentRound.codeOnLastUnitDeath != null
            currentRound.codeOnLastUnitDeath.run(currentRound)
        stopMusic()
        transitionToShop(true)


    protected static function anyUnitDies()
        if aRoundIsRunning and not roundWon
            unit dying = GetDyingUnit()
            
            if dying == hero
                roundLost()
            
            else if isBossRound and dying == bossUnit
                roundWon = true
                currentRound.killSpawnedUnits()
                roundWon()           
                    
            else if wasLastUnit()
                doAfter(0.1) ->
                    if wasLastUnit()
                        roundWon()
            

    static function startNextRound()
        if totalNumberOfRounds != 0
            
            if not currentRoundNumber > totalNumberOfRounds

                aRoundIsRunning = true
                roundWon = false

                snd_StartRound.play()
                
                stopMusic()

                transitionToArena()

            else
                error("No more rounds")

        else
            error("No rounds added")
            
    
        
    function prepare()
        isBossRound = false
        if codeOnPrepare != null
            codeOnPrepare.run(this)
    
        


        
               
public interface Round_RemoteFunction
    function run(Round round)
 
                
init
    CreateTrigger()
    ..registerAnyUnitEvent(EVENT_PLAYER_UNIT_DEATH)
    ..addAction(function Round.anyUnitDies)
        
        
        
        
package Round4

import public Round3

import UnitVisualsUtils
import AbilityTools
import AutoCastAbility

let FOOTMAN = 'h000'
let MEDIC = 'n00A'
let WIZARD ='n009'

let HEAL_COOLDOWN   = 2.
let HEAL_AOE        = 200.
let HEAL_DMG_FACTOR = 2.

Round round = null


init
    //=========================================================================================================================================================
    //  Human Battalion


    round = new Round
    ..setReward(30, 3)
    ..addItemRewards(ITEM_ENCHANTEDSWORD, ITEM_FOOTMANSHELM)
    ..addAbilityReward(1)
    ..setTitle("Human Battalion")
    ..setDescription("Trained soldiers, specialized in fighting together. Don't let them overrun you.")
    ..setHealthOrbSpawn(100, 50, 0.1, 25, 0.02)


    // Footman 1

    round.addSpawner(new UnitSpawner('h000', ENEMY, vec2(-639,1025), 16))
    ..setStartDelay(3)
    ..setFrequencyDeviation(0.05)
    ..setRandomSpawn(gg_rct_Arena_Spawn1)
    ..setNearestTargetOnSpawn(GetPlayableMapRect())
    ..setSpawnCount(8)
    ..setSpawnEffect("Abilities\\Spells\\Human\\Polymorph\\PolyMorphDoneGround.mdl")

    // Footman 1

    round.addSpawner(new UnitSpawner('h000', ENEMY, vec2(-639,1025), 16))
    ..setStartDelay(3)
    ..setFrequencyDeviation(0.05)
    ..setRandomSpawn(gg_rct_Arena_Spawn1)
    ..setNearestTargetOnSpawn(GetPlayableMapRect())
    ..setSpawnCount(8)
    ..setSpawnEffect("Abilities\\Spells\\Human\\Polymorph\\PolyMorphDoneGround.mdl")


    // Footman 2

    round.addSpawner(new UnitSpawner('h000', ENEMY, vec2(-639,1025), 15))
    ..setStartDelay(60)
    ..setFrequencyDeviation(0.1)
    ..setRandomSpawn(gg_rct_Arena_Spawn1)
    ..setNearestTargetOnSpawn(GetPlayableMapRect())
    ..setSpawnCount(5)
    ..setSpawnEffect("Abilities\\Spells\\Human\\Polymorph\\PolyMorphDoneGround.mdl")


    // Medic 1

    round.addSpawner(new UnitSpawner('n00A', ENEMY, vec2(527,1025), 24))
    ..setStartDelay(4)
    ..setFrequencyDeviation(0.03)
    ..setRandomSpawn(gg_rct_Arena_Spawn1)
    ..setNearestTargetOnSpawn(GetPlayableMapRect())
    ..setSpawnCount(5)
    ..setSpawnEffect("Abilities\\Spells\\Human\\Polymorph\\PolyMorphDoneGround.mdl")

    //Wizard 1

    round.addSpawner(new UnitSpawner('n009', ENEMY, vec2(527,1025), 20))
    ..setStartDelay(20)
    ..setFrequencyDeviation(0.03)
    ..setRandomSpawn(gg_rct_Arena_Spawn1)
    ..setSpawnCount(5)
    ..setSpawnEffect("Abilities\\Spells\\Human\\Polymorph\\PolyMorphDoneGround.mdl")
    ..setSoundOnSpawn(Sounds.knightNoRiderWhat1)


    // Wizard 2
    round.addSpawner(new UnitSpawner('n009', ENEMY, vec2(527,1025), 16))
    ..setStartDelay(70)
    ..setFrequencyDeviation(0.03)
    ..setRandomSpawn(gg_rct_Arena_Spawn1)
    ..setNearestTargetOnSpawn(GetPlayableMapRect())
    ..setSpawnCount(3)
    ..setSpawnEffect("Abilities\\Spells\\Human\\Polymorph\\PolyMorphDoneGround.mdl")
    ..setSoundOnSpawn(Sounds.knightNoRiderWhat1)


//================================================================================================================================================================================================
// STATS SCALING

    round.setStatScalingCallback() (unit u) ->
        let id = u.getTypeId()
        if( id == MEDIC or id == FOOTMAN or id == WIZARD )
            round.scaleUnitStats(u)
            u.adjustToDifficulty()


// SETUP COLOR
init
    UnitVisuals.addUnitType(FOOTMAN)
    ..setPlayerColor(PLAYER_COLOR_SNOW)

    UnitVisuals.addUnitType(MEDIC)
    ..setPlayerColor(PLAYER_COLOR_LIGHT_BLUE)

    UnitVisuals.addUnitType(WIZARD)
    ..setPlayerColor(PLAYER_COLOR_PEANUT)


    

//================================================================================================================================================================================================
// Heal

let HEAL = compiletime(defineAOE1(
    "Heal",
    "Heal allies",
    Icons.bTNReplenishHealth,
    "Q", 
    0,
    0,
    2000,
    HEAL_AOE,
    "attack"
))
    

public class AutoCastHeal extends AutoCastAbilityType
    construct()
        super( HEAL, Orders.dispel, TargetType.ENEMY_POINT, 3000, 0, 2 )

    override function findTarget(unit caster) returns boolean
        let owner = caster.getOwner()
        let targets = ENUM_GROUP..enumUnitsInRange(caster.getPos(), 3000)
        
        let healPower = caster.getPower() * HEAL_DMG_FACTOR
        targets.removeUnit(caster)        
        for target in targets
            if not target.isAlive() or target.isEnemyOf(owner) or target.getHP() > target.getMaxHP()-5
                targets.removeUnit(target)

        // Find best target
        // Score is the amount of healing it the caster will do (i.e. targets' missing health)
        if targets.size() > 0
            var bestTargetPos = vec2(0,0)
            var bestTargetScore = -1. 

            for primaryTarget in targets
                let targetPos = primaryTarget.getPos()
                var score = 0.
                for secondaryTarget in targets
                    if secondaryTarget != primaryTarget and targetPos.distanceTo(primaryTarget.getPos()) < HEAL_AOE
                        var healAmount = secondaryTarget.getMaxHP() - secondaryTarget.getHP()
                        healAmount = healAmount > healPower ? healPower : healAmount // Adjust to how much the spell can heal
                        score += healAmount
                if score > bestTargetScore
                    bestTargetScore = score
                    bestTargetPos = targetPos
            
            caster.issuePointOrderById(orderId, bestTargetPos)
            targets.clear()

            return true
        return false


init    
    addAutoCastAbilityToUnitType(MEDIC, new AutoCastHeal() )

    registerSpellEffectEvent(HEAL) ->
        let caster = GetSpellAbilityUnit()
        let targetPos = vec2( GetSpellTargetX(), GetSpellTargetY() )
        let healAmount = caster.getPower() * HEAL_DMG_FACTOR

        addEffect(Abilities.replenishHealthCaster, targetPos.withTerrainZ(50))
        ..setScale(1.20)
        ..setDuration(4)
        
        let targets = alliesInRange(caster.getOwner(), targetPos, HEAL_AOE)
        ..removeUnit(caster)

        for target in targets
            target.addHP( healAmount )
            target.addEffect(Abilities.healTarget, "origin")
            ..setDuration(4)

        
            
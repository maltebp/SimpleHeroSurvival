
package Round9


/* To Do:

    [ ] Setup units
    [ ] Summon demon
    [ ] Fel Fireball (or perhaps a green lightning thing?)
    [ ] Drain life  
    [ ] Balancing 

*/
//=========================================================================================================================================================
//  Warlocks

import public initlater Round8

import TimerUtils
import RegisterEvents
import AutoCastAbility
import GroupUtils
import TimedSpecialEffects
import UnitVisualsUtils
import InstantDummyCaster
import ChannelOnUnit
import Orders

//=========================================================================================================================================================
//  Setup

init

    round = new Round()
    ..setReward(80, 4)
    ..setTitle("Warlocks")
    ..setDescription("Don't go get thunder struck now.")
    ..setHealthOrbSpawn(90, 80, 0.1, 25, 0.02)

    // Spawner 1

    round.addSpawner(new UnitSpawner('n00E', ENEMYPLAYER, vec2(-639,1025), 30))
    ..setStartDelay(3)
    ..setFrequencyDeviation(0.1)
    ..setRandomSpawn(gg_rct_Arena_Spawn1)
    ..setNearestTargetOnSpawn(GetPlayableMapRect())
    ..setSpawnCount(5)

    //Spawner 2
    round.addSpawner(new UnitSpawner('n00E', ENEMYPLAYER, vec2(0,0), 20))
    ..setStartDelay(70)
    ..setFrequencyDeviation(0.1)
    ..setRandomSpawn(gg_rct_Arena_Spawn1)
    ..setNearestTargetOnSpawn(GetPlayableMapRect())
    ..setSpawnCount(2)
    
    //Spawner 2
    round.addSpawner(new UnitSpawner('n00E', ENEMYPLAYER, vec2(-639,1025), 1))
    ..setStartDelay(120)
    ..setFrequencyDeviation(0.1)
    ..setRandomSpawn(gg_rct_Arena_Spawn1)
    ..setNearestTargetOnSpawn(GetPlayableMapRect())
    ..setSpawnCount(1)


//=========================================================================================================================================================
// 


public class DrainLife extends ChannelOnUnit

    private static constant real DRAIN_RATIO = 1
    private static constant real DRAIN_FREQ = 1

    private real lifeToDrain = 0
    private real drainRatio = 1
    private real duration = 0

    construct(unit caster, unit target, real duration, real lifeToDrain, real drainRatio, real periodicEffectFrequency)
        super(caster,target,duration,periodicEffectFrequency)

        this.lifeToDrain = (lifeToDrain >= 0) ? lifeToDrain : 0
        this.drainRatio = (lifeToDrain >= 0 ) ? drainRatio : 0

        this.duration = duration
        


    static function cast(unit caster, unit target, real duration, real lifeToDrain) returns thistype
        return cast(caster, target, duration, lifeToDrain, DRAIN_RATIO, DRAIN_FREQ )


    static function cast(unit caster, unit target, real duration, real lifeToDrain, real drainRatio, real periodicEffectFrequency) returns thistype
        return new DrainLife(caster, target, duration, lifeToDrain, drainRatio, periodicEffectFrequency)


    override function periodicEffect()
        
        real drainedLife = 0

        real targetCurrentHP = target.getHP()


        if targetCurrentHP > lifeToDrain
            drainedLife = lifeToDrain
            target.setHP(targetCurrentHP-lifeToDrain)

        else
            drainedLife = targetCurrentHP
            target.kill()

        real casterCurrentHP = caster.getHP()
        real casterMaxHP = caster.getMaxHP()

        if drainedLife > 0 and casterMaxHP != casterCurrentHP
            
            drainedLife *= drainRatio

            real casterNewHP = casterCurrentHP + drainedLife
            
            if casterNewHP < casterMaxHP
                caster.setHP(casterNewHP)

            else
                caster.setHP(casterMaxHP)
            
        
        // Drain life

    override function updateExtension()
        if caster.getCurrentOrder() != Orders.drain
            destroy this


function castDrainLife()
    DrainLife.cast(GetSpellAbilityUnit(), GetSpellTargetUnit(), 10, 10)

init 
    registerSpellEffectEvent('A00O', function castDrainLife)
    
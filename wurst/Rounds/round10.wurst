package round10


/* 

    [x] Units
        [x] Boss
        [x] Exploding Robot
        [x] Mini tank
        [x] Repairman

    [ ] Mechanics
        [x] Chasing Rockets
        [ ] Robot explosion
        [x] Repairmain, repair

    [ ] Systems
        [ ] Make sure you only have to kill the boss
        [ ] Add sounds


    Boss: Engineer in tank version, slowly chasing you. He takes very little damage - kill him by destroying robots near him.

    Exploding Robots: Small exploding robots, which explode on death. Be careful how many you kill at a time. Don't kill them away from boss
    they determin the speed at which you can kill him.
    
    Mini tank: Firing rockets at you

    Repair man: attempts to heal boss
    
    Boss: chasing rockets - fires rockets after all players


*/

//=========================================================================================================================================================
//  Engineer (Boss)

import public initlater Round9

import TimerUtils
import RegisterEvents
import AutoCastAbility
import GroupUtils
import TimedSpecialEffects
import UnitVisualsUtils
import InstantDummyCaster
import ChannelOnUnit
import Orders
import HashMap
import ErrorHandling
import HomingRockets

int BOSSID = 'n00H'
int BOSSID_TANK = 'n00I'

int HOMINGROCKETS_DAMAGE = 50
real HOMINGROCKETS_FREQ     = 0.5
real HOMINGROCKETS_DURATION = 8


SoundDefinition snd_BossSpawn = new SoundDefinition(Sounds.heroTinkerWhat4, false)
SoundDefinition snd_RocketBarrage = new SoundDefinition(Sounds.heroTinkerPissed7, false)


// ================================================================================================================================
// Settings


//=========================================================================================================================================================
//  Setup

init

    round = new Round()
    ..setReward(80, 4)
    ..setTitle("Tinker (Boss)")
    ..setDescription("Explosions will be both your friend and enemy")
    ..setHealthOrbSpawn(90, 80, 0.1, 25, 0.02)

    RemoteFunction<UnitSpawner> remoteFunc

    remoteFunc = (UnitSpawner spawner) -> begin
        spawner.getLastSpawnedUnit().issueImmediateOrderById(Orders.robogoblin)
        snd_BossSpawn.play()
    end

    // Tinker
    round.addSpawner(new UnitSpawner('n00H', ENEMYPLAYER, vec2(-639,1025), 1))
    ..setRandomSpawn(gg_rct_Arena_Spawn1)
    ..setNearestTargetOnSpawn(GetPlayableMapRect())
    ..setSpawnCount(1)
    ..setCodeOnSpawn(remoteFunc)


    
    // Mechanic
    round.addSpawner(new UnitSpawner('o001', ENEMYPLAYER, vec2(-639,1025), 30))
    ..setStartDelay(5)
    ..setFrequencyDeviation(0)
    ..setRandomSpawn(gg_rct_Arena_Spawn1)
    ..setNearestTargetOnSpawn(GetPlayableMapRect())
    ..setSpawnCount(5)


    // Auto Cast Abilities
    addAutoCastAbilityToUnitType('o001', new AutoRepair() )
    addAutoCastAbilityToUnitType('n00H', new AutoCastAbilityType('A01F', Orders.tranquility, TargetType.ENEMY_IMMEDIATE, 6000, 10, 30) )


    // Unit Colors
    UnitVisuals.addUnitType('o001')..setPlayerColor(PLAYER_COLOR_COAL)
    UnitVisuals.addUnitType('n00H')..setPlayerColor(PLAYER_COLOR_AQUA)
    UnitVisuals.addUnitType('n00I')..setPlayerColor(PLAYER_COLOR_AQUA)


//=========================================================================================================================================================


class AutoRepair extends AutoCastAbilityType
    
    construct()
        super( 'A00R', Orders.chainlightning, TargetType.FRIENDLY_UNIT, 3000, 0, 0.6 )

    override function findTarget(unit caster) returns boolean

        // Checks if caster is already casting
        if not caster.getCurrentOrder() == orderId

            group targets = ENUM_GROUP
            
            targets.enumUnitsInRange(caster.getPos(), triggerRange)

            for target in targets
                if target.getOwner().isEnemyOf(caster.getOwner()) or target.getTypeId() != BOSSID_TANK or not target.isAliveTrick()
                    targets.removeUnit(target)

            if targets.size() > 0
                if targets.size() == 1
                    caster.issueTargetOrderById(orderId, targets.getRandomUnit())
                    return true
                else
                    error("More than 1 engineer!")
                    return false
                    

            else
                return false

        else
            return false


// =============================================================================================================================

class RocketBarrage

    private static constant int ORDERID = Orders.tranquility
    
    protected unit caster
    protected int damage
    protected real range

    private timer timer_Duration
    private timer timer_FireFreq

    construct(unit caster, int damage, real range, real fireFreq, real duration)
        this.caster = caster
        this.damage = damage
        this.range = range

        timer_Duration = getTimer()
        ..setData(this castTo int)
        ..start(duration, function callback_EndDuration )

        timer_FireFreq = getTimer()
        ..setData(this castTo int)
        ..startPeriodic(fireFreq, function callback_FireOnAll )

    ondestroy
        timer_Duration.release()
        timer_FireFreq.release()

    /** Filters targets from the group. Does not create a new group, but returns the same one */
    protected function getTargets() returns group

        group targets = ENUM_GROUP

        targets.enumUnitsInRange(caster.getPos(), range)

        for target in targets
            if target.getOwner().isAllyOf(caster.getOwner()) or not target.isAlive()
                targets.removeUnit(target)

        return targets
        

    protected function fireOnAll()
        
        if not shouldDestroy()
            group targets = getTargets()

            if targets.size() > 0 
                for target from targets 
                    fire(target)
        
        else
            destroy this
    
        
    protected function shouldDestroy() returns boolean
        return caster == null or not caster.isAlive() or caster.getCurrentOrder() != ORDERID

    private  static function callback_FireOnAll()
        GetExpiredTimer().getData() castTo thistype.fireOnAll()

    private static function callback_EndDuration()
        destroy GetExpiredTimer().getData() castTo thistype 

    protected function fire(unit target)
        new HomingRocketGenerator(caster.getPos(), caster.getOwner(), target, damage)

    
function rocketBarrage()
    snd_RocketBarrage.play()
    new RocketBarrage(GetSpellAbilityUnit(), HOMINGROCKETS_DAMAGE, 5000, HOMINGROCKETS_FREQ, HOMINGROCKETS_DURATION)
   

init
    registerSpellEffectEvent('A01F', function rocketBarrage )
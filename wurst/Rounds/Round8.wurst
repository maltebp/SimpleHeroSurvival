package Round8

//=========================================================================================================================================================
//  Engineer (Boss)

import public Round7

import TimerUtils
import RegisterEvents
import AutoCastAbility
import TimedSpecialEffects
import UnitVisualsUtils
import ErrorHandling
import HomingRockets
import Damage


int BOSSID = 'n00H'
int BOSSID_TANK = 'n00I'

int EXPLODINGGOBLIN = 'n00J'
int MINITANK = 'h004'
int MECHANIC = 'o001'

int HOMINGROCKETS_DAMAGE = 60
real HOMINGROCKETS_FREQ     = 0.5
real HOMINGROCKETS_DURATION = 8


real EXPLODINGGOBLIN_DAMAGE = 60
real EXPLODINGGOBLIN_RANGE  = 350
real EXPLODINGGOBLIN_BOSSDAMAGE = 650
real EXPLODINGGOBLIN_DELAY = 2

SoundDefinition snd_BossSpawn = new SoundDefinition(Sounds.heroTinkerWhat4, false)
SoundDefinition snd_RocketBarrage = new SoundDefinition(Sounds.heroTinkerPissed7, false)
SoundDefinition snd_RobotExplode = new SoundDefinition(Sounds.ironGolemYes1, false)
SoundDefinition snd_HeroDeath = new SoundDefinition(Sounds.heroTinkerYesAttack2, false)
SoundDefinition snd_BossDeath = new SoundDefinition(Sounds.tinkerDeathAlt1, false)

// ================================================================================================================================
// Settings


//=========================================================================================================================================================
//  Setup

init

    

    round = new Round()
    ..setReward(30, 3)
    ..addItemRewards(ITEM_POCKETROCKETGENERATOR, ITEM_DEFLECTIVEDISCDEVICE, ITEM_TINKERSPERSONALHAMMER)
    ..setMusic(Sounds.pursuitTheme)
    ..setTitle("Tinker (Boss)")
    ..setDescription("Explosions will be both your friend and enemy")
    ..setHealthOrbSpawn(125, 75, 0.1, 30, 0.02)
    ..addAbilityReward(1)

        // Note: Boss Round spawn 1 more orb

    // Setting up Round-remote functions
    Round_RemoteFunction roundFunction
    
    // Prepare
    roundFunction = (Round round) -> begin
        Round.setBossUnit(createUnit(ENEMYPLAYER, BOSSID, vec2(14,1000), angle(PIHALF+PI)))
        Round.bossUnit.pause()
        setDamageTestUnit(Round.bossUnit)
    end

    round.codeOnPrepare = roundFunction

    // On Start
    AutoCastAbilityType rocketBarrage = new AutoCastAbilityType('A01F', Orders.tranquility, TargetType.ENEMY_IMMEDIATE, 6000, 10, 30)
    roundFunction = (Round round) -> begin
        Round.bossUnit.unpause()
        //Round.bossUnit.issueImmediateOrderById(Orders.robogoblin)
        snd_BossSpawn.play()
        Round.bossUnit.addAutoCastAbility(rocketBarrage)
    end
    round.codeOnStart = roundFunction

    // On Boss Death
    roundFunction = (Round round) -> begin
        snd_BossDeath.play()
    end
    round.codeOnLastUnitDeath = roundFunction
    

    // On Hero Death
    roundFunction = (Round round) -> begin
        snd_HeroDeath.play()
    end
    round.codeOnHeroDeath = roundFunction


    // Mechanic
    round.addSpawner(new UnitSpawner(MECHANIC, ENEMYPLAYER, vec2(-639,1025), 24))
    ..setStartDelay(20)
    ..setFrequencyDeviation(0)
    ..setRandomSpawn(gg_rct_Arena_Spawn1)
    ..setNearestTargetOnSpawn(GetPlayableMapRect())

    // Mechanic
    round.addSpawner(new UnitSpawner(MECHANIC, ENEMYPLAYER, vec2(-639,1025), 24))
    ..setStartDelay(20)
    ..setFrequencyDeviation(0)
    ..setRandomSpawn(gg_rct_Arena_Spawn1)
    ..setNearestTargetOnSpawn(GetPlayableMapRect())

    // Exploding Robot
    round.addSpawner(new UnitSpawner(EXPLODINGGOBLIN, ENEMYPLAYER, vec2(0,0), 12))
    ..setStartDelay(10)
    ..setFrequencyDeviation(0)
    ..setRandomSpawn(gg_rct_Arena_Spawn1)
    ..setNearestTargetOnSpawn(GetPlayableMapRect())
    ..setSoundOnSpawn(Sounds.clockwerkGoblinYesAttack1)

    // Exploding Robot
    round.addSpawner(new UnitSpawner(EXPLODINGGOBLIN, ENEMYPLAYER, vec2(0,0), 20))
    ..setStartDelay(100)
    ..setFrequencyDeviation(0)
    ..setRandomSpawn(gg_rct_Arena_Spawn1)
    ..setNearestTargetOnSpawn(GetPlayableMapRect())
    ..setSoundOnSpawn(Sounds.clockwerkGoblinYesAttack1)

    // Mini Tank
    round.addSpawner(new UnitSpawner(MINITANK, ENEMYPLAYER, vec2(0,0), 8))
    ..setStartDelay(5)
    ..setFrequencyDeviation(0)
    ..setRandomSpawn(gg_rct_Arena_Spawn1)
    ..setNearestTargetOnSpawn(GetPlayableMapRect())
    ..setSoundOnSpawn(Sounds.steamTankWhat3)

    // Mini Tank
    round.addSpawner(new UnitSpawner(MINITANK, ENEMYPLAYER, vec2(0,0), 18))
    ..setStartDelay(120)
    ..setFrequencyDeviation(0)
    ..setRandomSpawn(gg_rct_Arena_Spawn1)
    ..setNearestTargetOnSpawn(GetPlayableMapRect())
    ..setSoundOnSpawn(Sounds.steamTankWhat3)


    // Auto Cast Abilities
    addAutoCastAbilityToUnitType(MECHANIC, new AutoRepair() )

    // Unit Colors
    UnitVisuals.addUnitType(MECHANIC)..setPlayerColor(PLAYER_COLOR_COAL)
    UnitVisuals.addUnitType('n00H')..setPlayerColor(PLAYER_COLOR_AQUA)
    UnitVisuals.addUnitType('n00I')..setPlayerColor(PLAYER_COLOR_AQUA)
    UnitVisuals.addUnitType(EXPLODINGGOBLIN)..setPlayerColor(PLAYER_COLOR_MAROON)
    UnitVisuals.addUnitType(MINITANK)..setPlayerColor(PLAYER_COLOR_WHEAT)


//=========================================================================================================================================================


class AutoRepair extends AutoCastAbilityType
    
    construct()
        super( 'A00R', Orders.chainlightning, TargetType.FRIENDLY_UNIT, 3000, 0, 0.6 )

    override function findTarget(unit caster) returns boolean

        // Checks if caster is already casting
        if not caster.getCurrentOrder() == orderId

            group targets = ENUM_GROUP
            
            targets.enumUnitsInRange(caster.getPos(), triggerRange)

            for target in targets
                if target.getOwner().isEnemyOf(caster.getOwner()) or target.getTypeId() != BOSSID_TANK or not target.isAliveTrick()
                    targets.removeUnit(target)

            if targets.size() > 0
                if targets.size() == 1
                    caster.issueTargetOrderById(orderId, targets.getRandomUnit())
                    return true
                else
                    error("More than 1 engineer!")
                    return false
                    

            else
                return false

        else
            return false


// =============================================================================================================================

class RocketBarrage

    private static constant int ORDERID = Orders.tranquility
    
    protected unit caster
    protected int damage
    protected real range
    protected real duration
    protected real fireFreq

    private timer timer_Duration
    private timer timer_FireFreq

    construct(unit caster, int damage, real range, real fireFreq, real duration)
        this.caster = caster
        this.damage = damage
        this.range = range
        this.fireFreq = fireFreq
        this.duration = duration

        timer_Duration = getTimer()
        ..setData(this castTo int)
        ..start(1.5, function callback_delayedStart )

        
    ondestroy
        caster.issueImmediateOrder("stop")

        if timer_Duration != null
            timer_Duration.release()

        if timer_FireFreq != null
            timer_FireFreq.release()

    protected function delayedStart()
        if shouldDestroy()
            destroy this
        else
            timer_Duration.start(duration, function callback_EndDuration )

            timer_FireFreq = getTimer()
            ..setData(this castTo int)
            ..startPeriodic(fireFreq, function callback_FireOnAll )

    private static function callback_delayedStart()
        GetExpiredTimer().getData() castTo thistype.delayedStart()

    /** Filters targets from the group. Does not create a new group, but returns the same one */
    protected function getTargets() returns group

        group targets = ENUM_GROUP

        targets.enumUnitsInRange(caster.getPos(), range)

        for target in targets
            if target.getOwner().isAllyOf(caster.getOwner()) or not target.isAlive()
                targets.removeUnit(target)

        return targets
        

    protected function fireOnAll()
        
        if not shouldDestroy()
            group targets = getTargets()

            if targets.size() > 0 
                for target from targets 
                    fire(target)
        
        else
            destroy this
    
        
    protected function shouldDestroy() returns boolean
        return caster == null or not caster.isAlive() or caster.getCurrentOrder() != ORDERID

    private  static function callback_FireOnAll()
        GetExpiredTimer().getData() castTo thistype.fireOnAll()

    private static function callback_EndDuration()
        destroy GetExpiredTimer().getData() castTo thistype 

    protected function fire(unit target)
        new HomingRocketGenerator(caster.getPos(), caster.getOwner(), target, damage)

    
function rocketBarrage()
    snd_RocketBarrage.play()
    new RocketBarrage(GetSpellAbilityUnit(), HOMINGROCKETS_DAMAGE, 5000, HOMINGROCKETS_FREQ, HOMINGROCKETS_DURATION)
   

init
    registerSpellEffectEvent('A01F', function rocketBarrage )


//=========================================================================================================================================================

function explode(unit explodingUnit)

    group targets = ENUM_GROUP..enumUnitsInRange(explodingUnit.getPos(), EXPLODINGGOBLIN_RANGE)

    for target in targets
        if not target.isAlive() or target == explodingUnit or (target.getOwner().isAllyOf(explodingUnit.getOwner()) and target.getTypeId() != BOSSID_TANK)
            targets.removeUnit(target)

    if targets.size() > 0
        for target from targets
            if target.getTypeId() == BOSSID_TANK
                explodingUnit.damageTarget(target, EXPLODINGGOBLIN_BOSSDAMAGE)
            else
                explodingUnit.damageTarget(target, EXPLODINGGOBLIN_DAMAGE)

    addEffect("Abilities\\Weapons\\Mortar\\MortarMissile.mdl", explodingUnit.getPos())
    ..setScale(2)
    ..destr()
    ..setTimeScale(0.5)

    addEffect("Abilities\\Spells\\Orc\\WarStomp\\WarStompCaster.mdl", explodingUnit.getPos())
    ..setScale(0.5)
    ..setDuration(3)

class RobotExplosion
    private unit robot
    private timer timer_Delay
    private timer timer_Animation

    construct(unit robot)
        snd_RobotExplode.play()

        this.robot = robot
        ..setVertexColor(color(255,120,120))
        ..setAnimation(0)
        ..setTimeScale(2)

        timer_Delay = getTimer()
        ..setData(this castTo int)
        ..start(EXPLODINGGOBLIN_DELAY, function callback_Explode )

        timer_Animation = getTimer()
        ..setData(this castTo int)
        ..startPeriodic(0.3, function callback_Animation )

    ondestroy
        explode(robot)

        robot.setAnimation("death")

        timer_Delay.release()
        timer_Animation.release()


    private function animation()
        robot.setAnimation(0)

    private static function callback_Animation()
        GetExpiredTimer().getData() castTo thistype.animation()

    private static function callback_Explode()
        destroy GetExpiredTimer().getData() castTo thistype

function goblinExplodes()
    unit dyingUnit = GetTriggerUnit()
    
    if dyingUnit.getTypeId() == EXPLODINGGOBLIN

        new RobotExplosion(dyingUnit)
        

init
    registerPlayerUnitEvent(EVENT_PLAYER_UNIT_DEATH, function goblinExplodes )
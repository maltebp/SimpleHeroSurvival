package VoodooLink

import HeroDefaults
import ComboSystem
import HoverAbility
import TrollAnimations
import AbilityCreation
import Assets
import MyLibrary
import DamageDetection
import LightningBounce
import GroupUtils
import LinkedList
import FadeAndFilters
import Damage
import ErrorHandling
import DamageType
import SoulDrainData
import Artifact
import Updater

import AbilityTools
import Voodoo
import UnitIndexer




//================================================================================================================================================================================================
// Settings


let DMG_FACTOR = 0.25
let DURATION = 10.

let JUMP_RANGE = 400.
let JUMP_COUNT = 4

let RADIUS      = 150.

let VOODOO_DMG_FACTOR = 0.01

let BURN_RADIUS         = 150.
let BURN_DMG_FACTOR     = 0.5
let BURN_DURATION       = 5.
let BURN_FREQ           = 1.

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

public let TROLL_VOODOO_LINK = compiletime(defineSingleTarget1(
    "Voodoo Link",
    ("Throw a fiery concoction, which deals {0} of your power as damage to all enemies it hits."+
        "The concoction leaves the ground fiery, and deals {1} of your power as damage to any enemies"
        +" standing within it, every second for {2} seconds."+
        "\n\nThis ability consumes all your voodoo, and its damage is increased by {0} for each charge consumed.").format(
        DMG_FACTOR.toPercentageString(),
        BURN_DMG_FACTOR.toPercentageString(),
        BURN_DURATION.toInt().toString(),
        VOODOO_DMG_FACTOR.toPercentageString()
    ),
    Icons.bTNShadowPact,
    "R",
    10.,
    45,
    600,
    "spell",
    false
))

//================================================================================================================================================================================================
init
    registerSpellEffectEvent(TROLL_VOODOO_LINK) ->
        onCast()

function onCast()
    let caster = GetSpellAbilityUnit()
    let target = GetSpellTargetUnit()

    let voodoo = caster.consumeVoodoo()
    new VoodooLink(
        caster, target, DMG_FACTOR, DURATION, JUMP_COUNT, JUMP_RANGE
    )
    
    
    

class VoodooLink extends LightningBounce
    private unit caster
    private real dmgFactor 
    private real duration

    construct( unit caster, unit target, real dmgFactor, real duration, int bounceCount, real bounceRange )
        super(caster, target, bounceCount)
        this.caster = caster
        this.dmgFactor = dmgFactor
        this.duration = duration

        range = bounceRange
        lightningType = LIGHTNING_SPIRIT_LINK
        lightningColor = colorA(80, 40, 130, 255)


    override function targetFilter( unit target) returns boolean
        return target.isValidEnemyTarget(caster.getOwner()) and not target.isType(UNIT_TYPE_ANCIENT)

    override function findBestTarget( group potentialTargets ) returns unit
        for target in potentialTargets
            if VoodooLinkBuff.getInstance(target) == null
                return target
        return potentialTargets.getRandomUnit()

    override function onHit( unit target )
        caster.castLink(target, duration, DMG_FACTOR)
        target.addEffect( Abilities.shadowStrikeMissile, "chest")
        ..destr()

        

public function unit.castLink( unit target, real duration, real damageFactor )
    /* Spread factor will update for all the linked units */
    VoodooLinkCaster.getInstance(this).addLinkUnit( target, damageFactor, duration )
    

class VoodooLinkCaster
    private static let instances = new LinkedList<thistype>
    protected unit caster

    private let links = new LinkedList<VoodooLinkBuff>

    construct( unit caster )
        this.caster = caster
        instances.add(this)


    ondestroy
        
        instances.remove(this)
        destroy links


    function addLinkUnit( unit target, real damageFactor, real duration )
        let link = target.applyLink( damageFactor, duration )
        if not links.has(link)
            links.add(link)
            link.casterInstance = this


    function removeLink( VoodooLinkBuff link )
        if links.has(link)
            links.remove(link)
        
        if links.size() == 0
            destroy this

    function splitDamage( VoodooLinkBuff source, real damage  )
        for buffInstance in links
            if buffInstance != source
                buffInstance.expectingLinkDamage = true
                let adjustedDamage = damage * buffInstance.damageFactor
                caster.damageTargetSpell( buffInstance.buffUnit, adjustedDamage)


    static function getInstance( unit whichUnit ) returns thistype 
        for instance in instances
            if instance.caster == whichUnit
                return instance
        return new VoodooLinkCaster(whichUnit)




public function unit.applyLink( real damageFactor, real duration ) returns VoodooLinkBuff
    var instance = VoodooLinkBuff.getInstance(this)
    if instance == null
        instance = new VoodooLinkBuff(this)
    instance.damageFactor = damageFactor
    instance.durationTimer.start( duration ) ->
        destroy GetExpiredTimer().getData() castTo VoodooLinkBuff
    return instance
    


class VoodooLinkBuff extends Updater

    private static let instances = new LinkedList<thistype>

    private effect sfx

    protected boolean expectingLinkDamage = false

    protected real damageFactor // The amount of damage the unit take's when other unit's are damaged

    protected unit buffUnit
    protected VoodooLinkCaster casterInstance = null

    protected timer durationTimer


    construct( unit buffUnit )
        this.buffUnit = buffUnit
        sfx = buffUnit.addEffect(Abilities.howlTarget, "origin")

        durationTimer = getTimer()..setData(this castTo int)

        instances.add(this)

        updateFreq = 0.5
        startUpdate()
        
    ondestroy
        durationTimer.release()
        sfx.destr()
        casterInstance.removeLink(this)
        instances.remove(this)


    function damageTaken(real damage)
        if( expectingLinkDamage )
            expectingLinkDamage = false
            // print( "{0} ({1}) was expecting damage ({2})".format(
            //     buffUnit.getName(),
            //     buffUnit.getIndex().toString(),
            //     damage.toString(1)
            // ), 8)
        else
            // print( "{0} ({1}) wasn't expecting damage ({2})".format(
            //     buffUnit.getName(),
            //     buffUnit.getIndex().toString(),
            //     damage.toString(1)
            // ), 8)
            casterInstance.splitDamage(this, damage)
            

    override function update()
        if buffUnit == null or not buffUnit.isAlive()
            destroy this

    static function getInstance(unit whichUnit) returns thistype
        for instance in instances
            if instance.buffUnit == whichUnit
                return instance
        return null


init    
    addOnDamageFunc() ->
        let damage = GetEventDamage()

        let buffInstance = VoodooLinkBuff.getInstance(GetTriggerUnit())
        if( buffInstance != null )
            buffInstance.damageTaken(damage)
            
        
    






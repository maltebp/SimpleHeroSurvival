package VoodooLink

import HeroDefaults
import ComboSystem
import HoverAbility
import TrollAnimations
import AbilityCreation
import Assets
import MyLibrary
import DamageDetection
import LightningBounce
import GroupUtils
import LinkedList
import FadeAndFilters
import Damage
import ErrorHandling
import DamageType
import SoulDrainData
import VoodooPotion
import Artifact
import initlater TrollGladiator
import Updater

// =========================================================================================================

let RANGE = DEFAULT_CASTRANGE
let BOUNCE_RANGE = 400.
let AIMASSIST = DEFAULT_AIMASSIST

let BOUNCE_COUNT = 4
let DURATION = 12.
let DURATION_VOODOO = 15.
let DAMAGE_FACTOR = 0.4

let SCROLLOFVOODOO_BOUNCECOUNT = BOUNCE_COUNT + 3
let SCROLLOFVOODOO_BOUNCERADIUS = BOUNCE_RANGE * 2


// =========================================================================================================


public let VOODOOLINK_ID  = compiletime( createComboMove("Voodoo Link", "Do a slam dunk!", Icons.bTNShadowPact1, Icons.bTNShadowPact1,10))
let ABIL_DEF = new PointAbility( VOODOOLINK_ID.useAbil, RANGE, ANIM_TROLL_SPELL)
public let COMBO_VOODOOLINK = new ComboMove( VOODOOLINK_ID, COMBO_POINT_Q, null, null )


init
    ABIL_DEF
    ..onEffect() ( caster, pos ) ->
        let targets = ENUM_GROUP..enumEnemyTargets( caster.getOwner(), pos, AIMASSIST)
        
        let target = targets.getNearestUnit(pos)

        if target != null
            new VoodooLink(caster, target)

            caster.reduceCharge( SOUL_DRAIN_COMBOMOVE_3)

        else
            caster.missAttack()

        caster.clearCombo()



class VoodooLink extends LightningBounce

    private unit caster

    construct( unit caster, unit target )
        super(caster, target, caster.hasArtifact(ARTIFACT_TROLL_SCROLLOFVOODOO) ? SCROLLOFVOODOO_BOUNCECOUNT : BOUNCE_COUNT)
        this.caster = caster

        range =  caster.hasArtifact(ARTIFACT_TROLL_SCROLLOFVOODOO) ? SCROLLOFVOODOO_BOUNCERADIUS : BOUNCE_RANGE
        lightningType = LIGHTNING_SPIRIT_LINK
        lightningColor = colorA(80, 40, 130, 255)


    override function targetFilter( unit target) returns boolean
        return target.isValidEnemyTarget(caster.getOwner()) and not target.isType(UNIT_TYPE_ANCIENT)


    override function findBestTarget( group potentialTargets ) returns unit
        for target in potentialTargets
            if VoodooLinkBuff.getInstance(target) == null
                return target
        return potentialTargets.getRandomUnit()

    override function onHit( unit target )
        let duration = (target.consumeVoodoo(caster)) ? DURATION_VOODOO : DURATION 
        caster.castLink(target, duration, DAMAGE_FACTOR)
        target.addEffect( Abilities.shadowStrikeMissile, "chest")
        ..destr()

        

public function unit.castLink( unit target, real duration, real damageFactor )
    /* Spread factor will update for all the linked units */
    VoodooLinkCaster.getInstance(this).addLinkUnit( target, damageFactor, duration )
    


class VoodooLinkCaster
    private static let instances = new LinkedList<thistype>
    protected unit caster

    private let links = new LinkedList<VoodooLinkBuff>

    construct( unit caster )
        this.caster = caster
        instances.add(this)


    ondestroy
        
        instances.remove(this)
        destroy links


    function addLinkUnit( unit target, real damageFactor, real duration )
        let link = target.applyLink( damageFactor, duration )
        if not links.has(link)
            links.add(link)
            link.casterInstance = this


    function removeLink( VoodooLinkBuff link )
        if links.has(link)
            links.remove(link)
        
        if links.size() == 0
            destroy this

    function splitDamage( VoodooLinkBuff source, real damage  )
        for buffInstance in links
            if buffInstance != source
                buffInstance.expectingLinkDamage = true
                let adjustedDamage = damage * buffInstance.damageFactor
                caster.damageTargetSpell( buffInstance.buffUnit, adjustedDamage)


    static function getInstance( unit whichUnit ) returns thistype 
        for instance in instances
            if instance.caster == whichUnit
                return instance
        return new VoodooLinkCaster(whichUnit)




public function unit.applyLink( real damageFactor, real duration ) returns VoodooLinkBuff
    var instance = VoodooLinkBuff.getInstance(this)
    if instance == null
        instance = new VoodooLinkBuff(this)
    instance.damageFactor = damageFactor
    instance.durationTimer.start( duration ) ->
        destroy GetExpiredTimer().getData() castTo VoodooLinkBuff
    return instance
    


class VoodooLinkBuff extends Updater

    private static let instances = new LinkedList<thistype>

    private effect sfx

    protected boolean expectingLinkDamage = false

    protected real damageFactor // The amount of damage the unit take's when other unit's are damaged

    protected unit buffUnit
    protected VoodooLinkCaster casterInstance = null

    protected timer durationTimer


    construct( unit buffUnit )
        this.buffUnit = buffUnit
        this.damageFactor = damageFactor

        sfx = buffUnit.addEffect(Abilities.howlTarget, "origin")

        durationTimer = getTimer()..setData(this castTo int)

        instances.add(this)

        updateFreq = 0.5
        startUpdate()
        
    ondestroy
        durationTimer.release()
        sfx.destr()
        casterInstance.removeLink(this)
        instances.remove(this)


    function damageTaken(real damage)
        
        if expectingLinkDamage
            expectingLinkDamage = false
            //debugMsg( buffUnit.getIndex().toString() + " was expecting damage ("+damage.toString(1)+")" )
        else
            //debugMsg( buffUnit.getIndex().toString() + " wasn't expecting damage ("+damage.toString(1)+")" )
            casterInstance.splitDamage(this, damage)
            

    override function update()
        if buffUnit == null or not buffUnit.isAlive()
            destroy this

    static function getInstance(unit whichUnit) returns thistype
        for instance in instances
            if instance.buffUnit == whichUnit
                return instance
        return null


init    
    addOnDamageFunc() ->
        var damage = GetEventDamage()
        let damageType = getDamageType()

        if damageType == DamageType.SPELL or damageType == DamageType.ATTACK
            
            if damage > 50000
                error("Damage is insanely high, some bug probably occured")

            if damage < 0
                damage *= -1

            let buffInstance = VoodooLinkBuff.getInstance(GetTriggerUnit())
            if buffInstance != null
                buffInstance.damageTaken(damage)
            
        
    






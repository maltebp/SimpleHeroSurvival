// package SoulHarvest

// import AbilityCreation
// import HoverAbility
// import ComboSystem
// import TrollAnimations
// import MyLibrary
// import UnitStatsSystem
// import Projectile
// import Damage
// import Assets
// import ClosureTimers
// import SoundDefinitions
// import SoulDrainData
// import VoodooPotion
// import Artifact
// import initlater TrollGladiator
// import AttackCooldown

// init
    
// // =========================================================================================================

// let DAMAGE_FACTOR = 0.75
// let DAMAGE_FACTOR_VOODOO = 1.
// let RADIUS = 500.
// let DRAIN_FACTOR = 0.75
// let SS_BONUS_DRAIN = 0.25
// let TARGETS = 10.

// let CHARGE = 6 // Per target

// // =========================================================================================================


// public let SOULHARVEST_ID  = compiletime( createComboMove("Soul Harvest", "Do a slam dunk!", Icons.bTNPossession, Icons.bTNPossession,8))
// let ABIL_DEF = new NoTargetAbility( SOULHARVEST_ID.useAbil, ANIM_TROLL_SPELL )
// public let COMBO_SOULHARVEST = new ComboMove( SOULHARVEST_ID, COMBO_POINT_W, null, null )

// init
//     ABIL_DEF
//     ..onEffect() ( caster ) ->
//         let casterPos = caster.getPos().withTerrainZ(60)

//         let casterDamage = caster.getDamage()
        
//         let sfx = addEffect( Units.wispExplode, casterPos.toVec2().withTerrainZ(-60) )
//         ..setTime(2.750)
//         ..setTimeScale(-1)
        
//         doAfter(0.8) ->
//             sfx.setPos(vec2(-1600,2500))
//             sfx.destr()    

//         SND_SACRIFICE.playOnPoint(casterPos)

//         var counter = 0

//         let targets = ENUM_GROUP..enumEnemyTargets( caster.getOwner(), casterPos.toVec2(), RADIUS )

//         if caster.hasArtifact( ARTIFACT_TROLL_SPIRITSTAFF )
//             caster.reduceCooldownPerc(0.5, true)

//         while targets.hasNext()  and counter < TARGETS
//             let currentTarget = targets.next()

//             let damage = (currentTarget.consumeVoodoo(caster)) ? DAMAGE_FACTOR_VOODOO : DAMAGE_FACTOR
//             let drainFactor = (caster.hasArtifact(ARTIFACT_TROLL_SPIRITSTAFF)) ? DRAIN_FACTOR+SS_BONUS_DRAIN: DRAIN_FACTOR 
//             let drain = damage * DRAIN_FACTOR
//             caster.damageTargetSpell( currentTarget, damage )
        
//             let projectile = new Projectile( currentTarget.getPos().withTerrainZ(60), Abilities.zigguratMissile )
//             projectile.getEffect().setScale(0.5)
//             projectile.fireUnit( caster, 60, true, 800, 0)

//             projectile.addActionOnFinish() ->
//                 if caster != null and caster.isAlive()
//                     caster.setHP( caster.getHP()+drain)
                    
//             caster.addCharge(CHARGE)
//             counter++
        
//         caster.clearCombo()


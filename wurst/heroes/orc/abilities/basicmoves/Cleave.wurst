// package Cleave

// import AbilityCreation
// import HoverAbility
// import OrcAnimations
// import SoundDefinitions
// import AttackCooldown
// import MyLibrary
// import GroupUtils
// import UnitStatsSystem
// import DamageType


// let RANGE = 100.
// let AIM_ASSIST = 50.
// let DAMAGE_FACTOR = 0.8
// let CLEAVE_TARGETS =  2
// let CLEAVE_FACOTR = 0.75
// let CLEAVE_RANGE = 150.


// public let ORC_Q_ID = compiletime( createQ( Icons.bTNSteelMelee, "Cleave", "Strike an enemy dealing damage to it.")  )

// let ABIL_DEF = new PointAbility( ORC_Q_ID, RANGE, ANIM_ORC_CLEAVE)


// init
//     ABIL_DEF
//     ..queueStandReady()

//     ABIL_DEF.setCastCritera() caster ->
//         return caster.attemptAttack( SND_SORCERESS_MISSILE_DEATH )

//     ABIL_DEF.onEffect() (caster, pos) ->
//         let targets = ENUM_GROUP..enumEnemyTargets( caster.getOwner(), pos, AIM_ASSIST)
        
//         if targets.size() > 0

//             let damage = caster.getDamage()*DAMAGE_FACTOR

//             // Main Target
//             SND_METAL_SLICE_HEAVY_FLESH[GetRandomInt(0, 2)].playOnPoint(pos.withTerrainZ())
//             let primaryTarget = targets.getNearestUnit(pos)
//             dealCodeDamage(caster, primaryTarget, damage )
//             targets.clear()
            
//             // Cleave effect
//             let cleavePos = primaryTarget.getPos()
//             let secondaryTargets = ENUM_GROUP..enumEnemyTargets( caster.getOwner(), cleavePos, CLEAVE_RANGE)
            
            
//             if secondaryTargets.contains(primaryTarget)
//                 secondaryTargets.removeUnit(primaryTarget)

//             for i=0 to CLEAVE_TARGETS-1
//                 if targets.size() >= 1
//                     let target = targets.getNearestUnit(cleavePos)
//                     dealCodeDamage(caster, target, caster.getDamage()*DAMAGE_FACTOR*CLEAVE_FACOTR )
//                     targets.removeUnit(target)
//                 else
//                     break
     
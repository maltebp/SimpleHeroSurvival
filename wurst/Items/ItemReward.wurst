
// ================================================================================================================================

package ItemReward

// -----------------------------------------------------------------------------------------------------------------------------

import LinkedList
import ErrorHandling
import StatType
import MapBounds


// ================================================================================================================================

public class ItemReward

// -----------------------------------------------------------------------------------------------------------------------------

    private int itemId
    private string name 
    private ItemShop shop = null
    private boolean hasBeenReleased = false

    /** Create a new ItemReward */
    construct( int itemId )
        this.itemId = itemId

        setupItemName()

    /** Creates an new ItemReward sold from a specific shop */
    construct( int itemId, ItemShop shop )
        this.itemId = itemId
        this.shop = shop

        setupItemName()
     
    /** Setup the name variable */
    private function setupItemName()
        item tempItem = createItem(itemId, boundMax )
        name = tempItem.getName()
        tempItem.remove()

    /** Gets the name of the item */
    function getName() returns string
        return name

    /** Releases the item to a shop, making it possible to buy */
    function release()
        if hasBeenReleased
            error(name+" has already been released")
        else
            if shop == null
                ItemShop.getReadyShop().addItem(itemId)

            else
                shop.addItem(itemId)
            hasBeenReleased = true




// ================================================================================================================================
 
public class ItemShop

// -----------------------------------------------------------------------------------------------------------------------------

    private static constant int MAXITEMS = 11

    private static trigger trg_SellItem = null
    private static LinkedList<ItemShop> allShops = new LinkedList<ItemShop>

    private unit shop
    private LinkedList<int> items = new LinkedList<int>
    

    /** Creates a new ItemShop which can sell ItemReward objects */
    construct( unit shopUnit )
        shop = shopUnit

        if trg_SellItem == null
            trg_SellItem = CreateTrigger()
            ..addAction(function itemSold)

        trg_SellItem.registerUnitEvent(shop, EVENT_UNIT_SELL_ITEM)
        
        allShops.add(this)
        
        
    /** Checks if an item shop is full */
    function isFull() returns boolean
        return items.size() >= MAXITEMS


    /** Adds an item to the shop's stock */
    function addItem(int itemId)
        if isFull()
            error("Item shop is full")
            return
        else
            items.add(itemId)
            refreshItems()

        
    /** Removes all items from the shop and readds them */
    private function refreshItems()
        /*  This function is necessary, since the way I add items to the shops
            they will disappear from the shop, once they're bought */
        
        for itemType in items
            RemoveItemFromStock(shop, itemType)
            
        for itemType in items
            AddItemToStock(shop, itemType, 1, 1)


    /** Gets a shop which is not full */
    static function getReadyShop() returns ItemShop
        for shop in allShops
            if not shop.isFull()
                return shop
        return null


    /** Gets the ArtifactShop object for the particular shop */ 
    static function getShop(unit shopUnit) returns ItemShop
        
        for shop in allShops
            if shop.shop == shopUnit
                return shop

        return null
    
    /** Trigger action when an item is sold from one of the shops */
    private static function itemSold()
        getShop(GetSellingUnit()).refreshItems()
    
    
// ================================================================================================================================

// SHOP SETUP
public constant ItemShop    SHOP_NOVICEGEAR             = new ItemShop(gg_unit_n003_0015)
public constant ItemShop    SHOP_CHAMPIONGEAR           = new ItemShop(gg_unit_n002_0017)
public constant ItemShop    SHOP_LEGENDSGEAR            = new ItemShop(gg_unit_n000_0000)

// ITEM SETUP
public constant let  ITEM_COMMONGEM          = new ItemReward( 'I00A' )
public constant let  ITEM_DULLBLADE          = new ItemReward( 'I000' )
public constant let  ITEM_LEATHERARMOR       = new ItemReward( 'I006' )
public constant let  ITEM_AMULET             = new ItemReward( 'I02E')
public constant let  ITEM_GNOLLSOLDBOOTS     = new ItemReward( 'I007' )
public constant let  ITEM_BONEGLOVES         = new ItemReward( 'I01F' )
public constant let  ITEM_MAGICTALISMAN      = new ItemReward( 'I00I' )
public constant let  ITEM_MAGICGEM           = new ItemReward( 'I00J' )
public constant let  ITEM_ENCHANTEDSWORD     = new ItemReward( 'I00L' )
public constant let  ITEM_FOOTMANSHELM       = new ItemReward( 'I00M' )
public constant let  ITEM_GARGOYLECLOAK      = new ItemReward( 'I00N' )
public constant let  ITEM_LAVATEMPEREDBOOTS  = new ItemReward( 'I01G' )
public constant let  ITEM_CLOAKOFFLAME       = new ItemReward( 'I00D' )
public constant let  ITEM_SOULSTONE          = new ItemReward( 'I01H' )
public constant let  ITEM_STORMLORDCROWN     = new ItemReward( 'I00E' )
public constant let  ITEM_DEMONICFIGURINE           = new ItemReward( 'I00T' )
public constant let  ITEM_POCKETROCKETGENERATOR     = new ItemReward('I008')
public constant let  ITEM_DEFLECTIVEDISCDEVICE      = new ItemReward('I00B')
public constant let  ITEM_TINKERSPERSONALHAMMER     = new ItemReward('I009')
public constant let     ITEM_STONEDOLL = new ItemReward('I01I')
public constant let     ITEM_GIANTSSKIN = new ItemReward('I00U')
public constant let ITEM_FELSTONE = new ItemReward('I01R')
public constant let ITEM_LIVINGWATER = new ItemReward('I01S')
public constant let ITEM_TRIDENT = new ItemReward('I01T')
public constant let ITEM_SPIDERBRACERS = new ItemReward('I01U')




        // Blueprint
        // public constant ItemReward ITEM_[name] = new ItemReward( itemId )
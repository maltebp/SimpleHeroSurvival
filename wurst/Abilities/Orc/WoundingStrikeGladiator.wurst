package WoundingStrikeGladiator

import SoundUtils
import RegisterEvents
import AttackDamage
import TimerUtils
import InstantDummyCaster
import Orders
import HashMap
import TimedSpecialEffects
import Damage
import ChargeSystem
import Enrage
import Artifact
import GroupUtils
import BloodOfMannoroth
import Frenzy
import ClosureTimers

//=========================================================================================================================================================

constant real BASEDAMAGE = 30
constant real DAMAGEFACTOR = 2.0
constant real DOT_BASEDAMAGE = 5
constant real DOT_DAMAGEFACTOR = 0.5
constant int  DURATION = 5
constant real  COOLDOWN = 5

constant int  CHARGE = 15
constant real ENRAGE_DAMAGEINC = 0.01 // Decimal percent pr. enrage charge



constant int KILMAIM_DURATIONINC = 4
constant real KILMAIM_DAMAGEINC = 0.5
constant real TOOTHOFTHEWARCHIEF_RANGE = 250
constant real TOOTHOFTHEWARCHIEF_DMG = 0.75 // Percent of original

// For Slow Factor: see ability in Editor

constant int ABILITYID = 'A005'

//=========================================================================================================================================================


constant string array snd_OnAttack_File = [Sounds.metalHeavySliceFlesh3, Sounds.metalHeavySliceFlesh1, Sounds.metalHeavySliceFlesh2]
SoundDefinition array snd_OnAttack
SoundDefinition snd_EnrageHit = new SoundDefinition(Sounds.warstomp, false, true)



function onCast()
    unit caster = GetSpellAbilityUnit()
    unit target = GetSpellTargetUnit()
    real enrageFactor = 1+caster.consumeEnrage()*ENRAGE_DAMAGEINC

    real cooldown = COOLDOWN * (caster.getFrenzyCooldownReduction())
    caster.setAbilityCooldown(ABILITYID, 1, cooldown)

    // Sound
    if snd_OnAttack[0] == null
        for i=0 to 2
            snd_OnAttack[i] = new SoundDefinition(snd_OnAttack_File[i], false, true)
    snd_OnAttack[GetRandomInt(0, 2)].playOnPoint(target.getPos3Fly())

    int charge = (caster.hasArtifact(ARTIFACT_BLOODOFMANNOROTH)) ? R2I(CHARGE * (1+BLOODOFMANNOROTH_CHARGEINC)) : CHARGE
    caster.addCharge(charge)



    int dotDuration = (caster.hasArtifact(ARTIFACT_KILMAIM)) ? DURATION+KILMAIM_DURATIONINC : DURATION
    real totalAttackDamagae = I2R(caster.getTotalAttackDamage())
    real primaryDamage = (BASEDAMAGE + totalAttackDamagae * DAMAGEFACTOR)  *enrageFactor
    real dotDamage     = (DOT_BASEDAMAGE + totalAttackDamagae * DOT_DAMAGEFACTOR)  *enrageFactor

    hitTarget(target, caster, primaryDamage, dotDamage, I2R(dotDuration), enrageFactor > 1)

    // Secondary Target
    if caster.hasArtifact(ARTIFACT_TOOTHOFTHEWARCHIEF)

        group targets = ENUM_GROUP..enumUnitsInRange(target.getPos(), TOOTHOFTHEWARCHIEF_RANGE)

        for aTarget in targets
            if aTarget.getOwner().isAllyOf(caster.getOwner()) or not aTarget.isAlive() or aTarget == target
                targets.removeUnit(aTarget)

        if targets.size() > 0
            unit secondaryTarget = targets.getNearestUnit(target.getPos())
            hitTarget(secondaryTarget, caster, primaryDamage*TOOTHOFTHEWARCHIEF_DMG, dotDamage*TOOTHOFTHEWARCHIEF_DMG, I2R(dotDuration), enrageFactor > 1)
        


function hitTarget(unit target, unit caster, real primaryDamage, real dotDamage, real dotDuration, boolean enraged)

    target.addEffect("Abilities\\Spells\\Other\\Stampede\\StampedeMissileDeath.mdl","origin")
    ..setDuration(3)
    target.addEffect("Abilities\\Weapons\\GlaiveMissile\\GlaiveMissile.mdl", "origin")
    ..destr()

    if enraged
        target.addEffect("Abilities\\Spells\\Orc\\Disenchant\\DisenchantSpecialArt.mdl", "chest")
        ..setDuration(3)
        snd_EnrageHit.playOnPoint(target.getPos3with(150))

    caster.damageTargetPhysical(target, primaryDamage)
    
    real finalDotDamage = (caster.hasArtifact(ARTIFACT_KILMAIM)) ? dotDamage*(1+KILMAIM_DAMAGEINC) : dotDamage

    doAfter(0.1) ->
        WoundingStrikeBuff.add(target, caster, finalDotDamage, dotDuration)



class WoundingStrikeBuff
    private static HashMap<unit, thistype> targets = new HashMap<unit, thistype>

    private unit target
    private unit source
    private timer timer_Duration
    private timer timer_Dot
    private real dotDamage

    construct(unit whichTarget, unit source, real dotDamage)
        target = whichTarget
        this.source = source
        this.dotDamage = dotDamage
        timer_Duration = getTimer()..setData(this castTo int)
        timer_Dot = getTimer()..setData(this castTo int)
        
        InstantDummyCaster.castTarget(source.getOwner(), 'A00A', 1, Orders.slow, target)

    ondestroy
        if target.isAliveTrick()
            target.removeAbility('B002')

        timer_Duration.release()
        timer_Dot.release()
        
        targets.remove(target)


    static function add(unit whichTarget, unit source, real dotDamage,  real duration)   
        
        if not targets.has(whichTarget)
            targets.put(whichTarget, new WoundingStrikeBuff(whichTarget, source, dotDamage) )
        else
            thistype instance = targets.get(whichTarget)
            instance.dotDamage = dotDamage
            instance.source = source

        targets.get(whichTarget).start(duration)
        
    private function start(real duration)
        timer_Duration.start(duration, function removeBuff)
        timer_Dot.startPeriodic(1, function dealDamage)

    static function dealDamage()
        thistype instance = GetExpiredTimer().getData() castTo thistype
        instance.source.damageTargetPhysical(instance.target, instance.dotDamage)
        instance.target.addEffect("Objects\\Spawnmodels\\Human\\HumanBlood\\HeroBloodElfBlood.mdl", "origin")
        ..setDuration(3)

    static function removeBuff()
        destroy GetExpiredTimer().getData() castTo thistype
                

init
    registerSpellEffectEvent(ABILITYID, function onCast)
package Enrage

import TimerUtils
import ChargeSystem
import RegisterEvents
import SoundUtils
import HashMap

constant int ABILITYID = 'A01I'
constant int DUMMYABILITYID = '9999'
constant int BUFFID = '0000'
constant int MAXCONSUMEAMOUNT = 40
constant real DURATION = 6


constant SoundDefinition snd_Error = new SoundDefinition(Sounds.error, false)


/** Removes the unit's enrage ability and returns the Enrage Charge value */
public function unit.consumeEnrage() returns real
    if not this.hasEnrage()
        return 0
    UnitEnrage enrageInstance = UnitEnrage.getUnitInstance(this)
    real charge = enrageInstance.getCharge()
    destroy enrageInstance
    return charge
    

public function unit.activateEnrage(real charge, real duration)
    UnitEnrage.getUnitInstance(this)
    ..setCharge(charge)
    ..setDuration(duration)
    

public function unit.getEnrageCharge() returns real
    if not this.hasEnrage()
        return 0
    return UnitEnrage.getUnitInstance(this).getCharge()

public function unit.removeEnrage()
    if this.hasEnrage()
        destroy UnitEnrage.getUnitInstance(this)

public function unit.hasEnrage() returns boolean
    return UnitEnrage.unitHasEnrage(this)
    



class UnitEnrage
    
    private unit enrageUnit
    private real charge = 0
    private timer timer_Duration
    private static IterableMap<unit, thistype> instances

    construct(unit whichUnit)

    ondestroy
        instances.remove(enrageUnit)
        if timer_Duration != null
            timer_Duration.release()

        enrageUnit.removeAbility(BUFFID)


    protected function setDuration(real duration)
        if timer_Duration == null
            timer_Duration = getTimer()
            
            ..setData(this castTo int)

        ..start(duration, function callback_EndDuration)
    

    protected function setCharge(real charge)
        this.charge = charge


    function getCharge() returns real
        return charge


    static function getUnitInstance(unit whichUnit) returns thistype
        if instances == null
            instances = new IterableMap<unit, thistype>
            
        if instances.has(whichUnit)
            return instances.get(whichUnit)

        return new UnitEnrage(whichUnit)
        

    private static function callback_EndDuration()
        destroy GetExpiredTimer().getData() castTo thistype


    static function unitHasEnrage(unit whichUnit) returns boolean
        if instances == null
            return false
        if instances.has(whichUnit)
            return true
        return false
    

function onCast()
    
    if GetSpellAbilityId() == ABILITYID

        unit caster = GetSpellAbilityUnit()

        int charge = caster.getCharge()
        if charge > 0
            int consumedCharge = (charge > MAXCONSUMEAMOUNT) ? MAXCONSUMEAMOUNT : charge
            caster.reduceCharge(consumedCharge)
            caster.activateEnrage(I2R(consumedCharge), DURATION)
    

init

    registerSpellEffectEvent(ABILITYID, function onCast)
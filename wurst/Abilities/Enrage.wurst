package Enrage

import TimerUtils
import ChargeSystem
import RegisterEvents
import SoundUtils
import HashMap
import InstantDummyCaster
import Orders
import TimerUnitData
import TimedSpecialEffects

constant int ABILITYID = 'A01M'
constant int DUMMYABILITYID = 'A01L'
constant int BUFFID = 'B007'
constant int MAXCONSUMEAMOUNT = 40
constant real DURATION = 6
constant real MANACOST = 10


constant SoundDefinition snd_Error = new SoundDefinition(Sounds.error, false)


/** Removes the unit's enrage ability and returns the Enrage Charge value */
public function unit.consumeEnrage() returns real
    print("consuming charge")
    if not this.hasEnrage()
        print("no charge")
        return 0
    UnitEnrage enrageInstance = UnitEnrage.getUnitInstance(this)
    real charge = enrageInstance.getCharge()
    destroy enrageInstance
    return charge
    

public function unit.activateEnrage(real charge, real duration)
    UnitEnrage.getUnitInstance(this)
    ..setCharge(charge)
    ..setDuration(duration)
    

public function unit.getEnrageCharge() returns real
    if not this.hasEnrage()
        return 0
    return UnitEnrage.getUnitInstance(this).getCharge()

public function unit.removeEnrage()
    if this.hasEnrage()
        destroy UnitEnrage.getUnitInstance(this)

public function unit.hasEnrage() returns boolean
    return UnitEnrage.unitHasEnrage(this)
    



class UnitEnrage
    
    private unit enrageUnit
    private real charge = 0
    private timer timer_Duration = null
    private static IterableMap<unit, thistype> instances
    private boolean isDestroyed = false

    construct(unit whichUnit)
        print("creating new instance")
        enrageUnit = whichUnit
        InstantDummyCaster.castTarget(enrageUnit.getOwner(), DUMMYABILITYID, 1, Orders.unholyfrenzy, enrageUnit)
        instances.put(enrageUnit, this)


    ondestroy
        print("destroying instance")
        if isDestroyed
            print("is destroyed!")
        else
            print("is not destroyed")
        isDestroyed = true

        instances.remove(enrageUnit)
        instances.removeValue(this, true)

        if timer_Duration != null
            timer_Duration.pause()
            timer_Duration.release()
            

        enrageUnit.removeAbility(BUFFID)

        print("destroyed instance")


    protected function setDuration(real duration)

        if timer_Duration == null
            timer_Duration = getTimer()
            ..setData(this castTo int)

        timer_Duration.start(duration, function callback_EndDuration)
    

    protected function setCharge(real charge)
        this.charge = charge


    function getCharge() returns real
        return charge


    static function getUnitInstance(unit whichUnit) returns thistype

        if instances == null
            instances = new IterableMap<unit, thistype>
            
        if instances.has(whichUnit)
            return instances.get(whichUnit)

        return new UnitEnrage(whichUnit)
        

    private static function callback_EndDuration()
        destroy GetExpiredTimer().getData() castTo thistype


    static function unitHasEnrage(unit whichUnit) returns boolean
        if instances == null
            return false
        if instances.has(whichUnit)
            return true
        return false

    static function callback_CheckInstance()
        if instances == null
            print("Instances: null")
        else
            string s = "Instances: "
            for key in instances
                s += "U: "+key.getName()
                s += ", "+instances.get(key) castTo int.toString()+" | "

            print(s)
    

function onCast()
    
    if GetSpellAbilityId() == ABILITYID

        unit caster = GetSpellAbilityUnit()
        print("ENRAGE")
     
        int charge = caster.getCharge()

        if charge > 0
            caster.addEffect("Abilities\\Spells\\Orc\\AncestralSpirit\\AncestralSpiritCaster.mdl", "origin")
            ..setDuration(3)
            int consumedCharge = (charge > MAXCONSUMEAMOUNT) ? MAXCONSUMEAMOUNT : charge
            caster.reduceCharge(consumedCharge)
            caster.activateEnrage(I2R(consumedCharge), DURATION)
        
        else
            getTimer()
            ..setUnitData(caster)
            ..start(0.01, function resetCooldown)
            caster.addMana(MANACOST)
            snd_Error.playForPlayer(caster.getOwner())
    

function resetCooldown()
    timer t = GetExpiredTimer()
    unit u = t.getUnitData()
    t.release()    
    u.resetAbilityCooldown(ABILITYID)


init    
    getTimer().startPeriodic(0.99, function UnitEnrage.callback_CheckInstance)
    
    registerSpellEffectEvent(ABILITYID, function onCast)

    
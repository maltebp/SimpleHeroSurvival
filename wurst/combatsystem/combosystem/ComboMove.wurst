package ComboMove

import LinkedList
import ComboPoint
import AbilityCreation
import Colors

public class ComboMove
    private static let all = new LinkedList<thistype>
    private let combo = new LinkedList<ComboPointType>
    private comboMoveTuple moveIds 

    construct( comboMoveTuple moveIds, ComboPointType combo1, ComboPointType combo2, ComboPointType combo3 )
        this.moveIds = moveIds

        let currentDesc = BlzGetAbilityExtendedTooltip(moveIds.listAbil, 1)
        
        var comboDesc  = "Combo: "

        combo.add(combo1)
        comboDesc +=  combo1.col.toColorString() + combo1.name + "|r" 
        if combo2 != null
            combo.add(combo2)
            comboDesc +=  " "+combo2.col.toColorString() + combo1.name + "|r" 
        if combo3 != null
            combo.add(combo3)
            comboDesc +=  " "+combo1.col.toColorString() + combo1.name + "|r" 

        comboDesc += "|n"

        BlzSetAbilityExtendedTooltip(moveIds.listAbil, comboDesc+currentDesc, 1)

        all.add(this)

    function getAbilityId() returns int
        return moveIds.useAbil

    function getListId() returns int
        return moveIds.listAbil

    function getSize() returns int
        return combo.size()

    function getCombo() returns LinkedList<ComboPointType>
        return combo

    function getComboPointType(int index) returns ComboPointType
        return combo.get(index)


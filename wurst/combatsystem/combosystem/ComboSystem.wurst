package ComboSystem

import ComboUnit
import ComboPoint
import ComboMove
import Assets
import ErrorHandling

public let COMBO_POINT_Q = new ComboPointType( "Q", color(255,100,0), Objects.runicobject )
public let COMBO_POINT_W = new ComboPointType( "W", color(0,0,255), Objects.runicobject)
public let COMBO_POINT_E = new ComboPointType( "E", color(0,255,0), Objects.runicobject)

public function unit.addComboPoint( ComboPointType comboType ) returns boolean
    let definition = ComboUnitDefinition.getDefinition(this) 
    if definition != null
        if ComboUnit.getInstance(this).addComboPoint(comboType)
    return false

public function unit.removeLastComboPoint()
    let instance = ComboUnit.getInstance(this)
    if instance != null
        instance.removeLastComboPoint()

public function unit.isComboUnit() returns boolean
    return ComboUnitDefinition.getDefinition(this) != null

public function unit.hasComboMove( ComboMove move ) returns boolean
    return this.hasAbility(move.getAbilityId())
    
public function unit.clearCombo()
    let instance = ComboUnit.getInstance(this)
    if instance != null
        instance.clearMoves()
        instance.removeAllComboPoints()

public function unit.addComboMove( ComboMove move )
    if not this.hasComboMove(move)
        this.addAbility(move.getAbilityId())
    else
        error("Unit already has combo moving")
